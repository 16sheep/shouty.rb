"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var ExpressionFactory_1 = __importDefault(require("../src/ExpressionFactory"));
var ParameterTypeRegistry_1 = __importDefault(require("../src/ParameterTypeRegistry"));
var RegularExpression_1 = __importDefault(require("../src/RegularExpression"));
var CucumberExpression_1 = __importDefault(require("../src/CucumberExpression"));
describe('ExpressionFactory', function () {
    var expressionFactory;
    beforeEach(function () {
        expressionFactory = new ExpressionFactory_1.default(new ParameterTypeRegistry_1.default());
    });
    it('creates a RegularExpression', function () {
        assert.equal(expressionFactory.createExpression(/x/).constructor, RegularExpression_1.default);
    });
    it('creates a CucumberExpression', function () {
        assert.equal(expressionFactory.createExpression('x').constructor, CucumberExpression_1.default);
    });
    it('creates an UndefinedParameterTypeExpression', function () {
        assert.throws(function () { return expressionFactory.createExpression('{x}'); }, {
            message: 'Undefined parameter type {x}',
        });
    });
});
//# sourceMappingURL=ExpressionFactoryTest.js.map