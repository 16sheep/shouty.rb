"use strict";
/* eslint-disable @typescript-eslint/camelcase */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var ts_sinon_1 = require("ts-sinon");
var JSONTraverse_1 = require("../../src/cucumber-js/JSONTraverse");
var messages_1 = require("@cucumber/messages");
describe('traversing elements', function () {
    context('traverseFeature', function () {
        it('create ');
    });
    context('traverseElement', function () {
        var simpleScenario = {
            id: 'my-scenario',
            line: 3,
            keyword: 'scenario',
            type: 'scenario',
            name: 'My scenario',
            description: 'This scenario does things',
            steps: [
                {
                    keyword: 'Given ',
                    line: 6,
                    name: 'a failed step',
                    result: {
                        status: 'failed',
                    },
                    match: {
                        location: 'whatever.go:123',
                    },
                },
            ],
        };
        var hookedScenario = {
            id: 'my-scenario',
            line: 3,
            keyword: 'scenario',
            type: 'scenario',
            name: 'My scenario',
            description: 'This scenario does things',
            steps: [
                {
                    hidden: true,
                    keyword: 'Before ',
                    line: 3,
                    name: '',
                    result: {
                        status: 'passed',
                        duration: 4560000,
                    },
                    match: {
                        location: 'whatever.go:123',
                    },
                },
                {
                    keyword: 'Given ',
                    line: 6,
                    name: 'a failed step',
                    result: {
                        status: 'passed',
                        duration: 456000,
                    },
                    match: {
                        location: 'whatever.go:123',
                    },
                },
                {
                    hidden: true,
                    keyword: 'After',
                    line: 3,
                    name: '',
                    result: {
                        status: 'failed',
                        error_message: 'This hook failed',
                        duration: 45600000,
                    },
                    match: {
                        location: 'whatever.go:456',
                    },
                },
            ],
        };
        it('creates a Scenario using the AstMaker', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            var step = messages_1.messages.GherkinDocument.Feature.Step.create();
            astMaker.makeStep.returns(step);
            JSONTraverse_1.traverseElement(simpleScenario, astMaker, function () { return 'new-id'; }, supportCode);
            assert_1.default.deepEqual(astMaker.makeScenarioFeatureChild.getCall(0).args, [
                'new-id',
                3,
                'scenario',
                'My scenario',
                'This scenario does things',
                [step],
                undefined,
            ]);
        });
        it('doe not create steps for hooks', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            astMaker.makeScenarioFeatureChild.returns(messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
                scenario: messages_1.messages.GherkinDocument.Feature.Scenario.create({
                    id: 'scenario-id',
                }),
            }));
            JSONTraverse_1.traverseElement(hookedScenario, astMaker, function () { return 'new-id'; }, supportCode);
            assert_1.default.equal(astMaker.makeStep.callCount, 1);
        });
        it('correctly registers beforeHooks', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            astMaker.makeScenarioFeatureChild.returns(messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
                scenario: messages_1.messages.GherkinDocument.Feature.Scenario.create({
                    id: 'scenario-id',
                }),
            }));
            JSONTraverse_1.traverseElement(hookedScenario, astMaker, function () { return 'new-id'; }, supportCode);
            assert_1.default.deepEqual(supportCode.addPredictableBeforeHook.getCall(0).args, [
                'whatever.go:123',
                'scenario-id',
                'passed',
                4.56,
                undefined,
            ]);
        });
        it('correctly registers afterHooks', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            astMaker.makeScenarioFeatureChild.returns(messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
                scenario: messages_1.messages.GherkinDocument.Feature.Scenario.create({
                    id: 'scenario-id',
                }),
            }));
            JSONTraverse_1.traverseElement(hookedScenario, astMaker, function () { return 'new-id'; }, supportCode);
            assert_1.default.deepEqual(supportCode.addPredictableAfterHook.getCall(0).args, [
                'whatever.go:456',
                'scenario-id',
                'failed',
                45.6,
                'This hook failed',
            ]);
        });
    });
    context('traverseBeforeHook', function () {
        var beforeHook = {
            hidden: true,
            keyword: 'Before ',
            line: 15,
            name: '',
            result: {
                status: 'passed',
                duration: 4560000,
            },
            match: {
                location: 'whatever.go:123',
            },
        };
        it('registers the before Hook with the correct data', function () {
            var supportCode = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseBeforeHook(beforeHook, messages_1.messages.GherkinDocument.Feature.Scenario.create({ id: 'scenario-id' }), supportCode);
            assert_1.default.deepEqual(supportCode.addPredictableBeforeHook.getCall(0).args, [
                'whatever.go:123',
                'scenario-id',
                'passed',
                4.56,
                undefined,
            ]);
        });
    });
    context('traverseAfterHook', function () {
        var beforeHook = {
            hidden: true,
            keyword: 'After ',
            line: 15,
            name: '',
            result: {
                status: 'passed',
                duration: 1230000,
            },
            match: {
                location: 'whatever.go:123',
            },
        };
        it('registers the after Hook with the correct data', function () {
            var supportCode = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseAfterHook(beforeHook, messages_1.messages.GherkinDocument.Feature.Scenario.create({ id: 'scenario-id' }), supportCode);
            assert_1.default.deepEqual(supportCode.addPredictableAfterHook.getCall(0).args, [
                'whatever.go:123',
                'scenario-id',
                'passed',
                1.23,
                undefined,
            ]);
        });
    });
    context('traverseStep', function () {
        var simpleStep = {
            keyword: 'Given ',
            line: 15,
            name: 'a step with a doctring:',
            result: {
                status: 'failed',
                duration: 456000,
            },
            match: {
                location: 'whatever.go:123',
            },
        };
        var docStringStep = {
            arguments: [
                {
                    content: '  This is some content',
                    line: 16,
                },
            ],
            keyword: 'Given ',
            line: 15,
            name: 'a step with a doctring:',
            result: {
                status: 'undefined',
            },
        };
        var datatableStep = {
            arguments: [
                {
                    rows: [
                        {
                            cells: ['name', 'value'],
                        },
                        {
                            cells: ['plic', '0'],
                        },
                        {
                            cells: ['ploc', '1'],
                        },
                    ],
                },
            ],
            keyword: 'Given ',
            line: 15,
            name: 'a step with a doctring:',
            result: {
                status: 'undefined',
            },
        };
        it('builds the doctring using the AstMaker', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            var docString = messages_1.messages.GherkinDocument.Feature.Step.DocString.create();
            astMaker.makeDocstring.returns(docString);
            JSONTraverse_1.traverseStep(docStringStep, astMaker, function () { return 'the-id'; }, supportCode);
            assert_1.default.deepEqual(astMaker.makeStep.getCall(0).args, [
                'the-id',
                15,
                'Given ',
                'a step with a doctring:',
                docString,
                null,
            ]);
        });
        it('builds the datatable using the astMaker', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            var datatable = messages_1.messages.GherkinDocument.Feature.Step.DataTable.create();
            astMaker.makeDataTable.returns(datatable);
            JSONTraverse_1.traverseStep(datatableStep, astMaker, function () { return 'the-id'; }, supportCode);
            assert_1.default.deepEqual(astMaker.makeStep.getCall(0).args, [
                'the-id',
                15,
                'Given ',
                'a step with a doctring:',
                null,
                datatable,
            ]);
        });
        it('registers the step in supportCode', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            astMaker.makeStep.returns(messages_1.messages.GherkinDocument.Feature.Step.create({
                id: 'a-random-step-id',
            }));
            JSONTraverse_1.traverseStep(simpleStep, astMaker, function () { return 'the-id'; }, supportCode);
            assert_1.default.deepEqual(supportCode.addPredictableStepDefinition.getCall(0).args, ['whatever.go:123', 'a-random-step-id', 'failed', 0.456, undefined]);
        });
    });
    context('traverseDocString', function () {
        var docString = {
            content: '  This is some content',
            line: 16,
        };
        it('call AstMaker.makeDocString with the content but no media-type', function () {
            var astMaker = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseDocString(docString, astMaker);
            assert_1.default.deepEqual(astMaker.makeDocstring.getCall(0).args, [
                null,
                '  This is some content',
            ]);
        });
    });
});
//# sourceMappingURL=JSONTraverseTest.js.map