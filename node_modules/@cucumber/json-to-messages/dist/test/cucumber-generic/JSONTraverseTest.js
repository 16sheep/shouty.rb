"use strict";
/* eslint-disable @typescript-eslint/camelcase */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var messages_1 = require("@cucumber/messages");
var ts_sinon_1 = require("ts-sinon");
var JSONTraverse_1 = require("../../src/cucumber-ruby/JSONTraverse");
var JSONTraverse_2 = require("../../src/cucumber-generic/JSONTraverse");
describe('traversing elements', function () {
    var simpleStep = {
        keyword: 'Given',
        name: ' some context',
        line: 10,
        match: {
            location: 'some/steps.rb:11',
        },
        result: {
            duration: 123,
            status: 'whatever',
        },
    };
    var background = {
        id: 'my-background',
        type: 'background',
        keyword: 'Background',
        name: '',
        description: 'This background doe not much stuff',
        line: 3,
        steps: [],
    };
    var scenario = {
        id: 'my-scenario',
        type: 'scenario',
        keyword: 'Scenario',
        name: 'My scenario',
        description: 'This is my first scenario',
        line: 5,
        steps: [simpleStep],
    };
    describe('traverseFeature', function () {
        var feature = {
            uri: 'path/to/some.feature',
            id: 'my-feature',
            line: 2,
            keyword: 'Feature',
            name: 'My feature',
            description: 'It does things and stuff',
            elements: [scenario],
        };
        var emptyFeature = {
            uri: 'path/to/empty.feature',
            id: 'empty-feature',
            line: 1,
            keyword: 'Feature',
            name: 'An empty feature',
            description: 'It does nothing',
            elements: [],
        };
        var multiBackgroundFeature = {
            uri: 'path/to/some.feature',
            id: 'my-feature',
            line: 2,
            keyword: 'Feature',
            name: 'My feature',
            description: 'It does things and stuff',
            elements: [background, background, background],
        };
        it('calls AstMaker.makeFeature', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var predictableSupportCode = ts_sinon_1.stubInterface();
            JSONTraverse_2.traverseFeature(emptyFeature, astMaker, messages_1.IdGenerator.incrementing(), predictableSupportCode, JSONTraverse_1.traverseElement);
            assert_1.default.deepEqual(astMaker.makeFeature.getCall(0).args, [
                1,
                'Feature',
                'An empty feature',
                'It does nothing',
                [],
                undefined,
            ]);
        });
        it('uses the result of AtMaker.makeFeatureChild to populate the children', function () {
            var gherkinScenario = messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
                scenario: messages_1.messages.GherkinDocument.Feature.Scenario.create({
                    id: 'whatever-scenario-id',
                }),
            });
            var supportCode = ts_sinon_1.stubInterface();
            var astMaker = ts_sinon_1.stubInterface();
            astMaker.makeScenarioFeatureChild.returns(gherkinScenario);
            JSONTraverse_2.traverseFeature(feature, astMaker, messages_1.IdGenerator.incrementing(), supportCode, JSONTraverse_1.traverseElement);
            assert_1.default.deepEqual(astMaker.makeFeature.getCall(0).args, [
                2,
                'Feature',
                'My feature',
                'It does things and stuff',
                [gherkinScenario],
                undefined,
            ]);
        });
        it('calls AstMaker.makeGherkinDocument with the generated feature', function () {
            var gherkinFeature = messages_1.messages.GherkinDocument.Feature.create({
                name: 'My awesome feature',
            });
            var supportCode = ts_sinon_1.stubInterface();
            var astMaker = ts_sinon_1.stubInterface();
            astMaker.makeFeature.returns(gherkinFeature);
            JSONTraverse_2.traverseFeature(feature, astMaker, messages_1.IdGenerator.incrementing(), supportCode, JSONTraverse_1.traverseElement);
            assert_1.default.deepStrictEqual(astMaker.makeGherkinDocument.getCall(0).args, [
                'path/to/some.feature',
                gherkinFeature,
            ]);
        });
        it('does not traverse the backgrounds when replicated', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            JSONTraverse_2.traverseFeature(multiBackgroundFeature, astMaker, messages_1.IdGenerator.incrementing(), supportCode, JSONTraverse_1.traverseElement);
            assert_1.default.ok(astMaker.makeBackgroundFeatureChild.calledOnce);
        });
    });
    describe('travereTag', function () {
        it('calls AstMaker.makeTag to create the message', function () {
            var astMaker = ts_sinon_1.stubInterface();
            JSONTraverse_2.traverseTag({ name: '@something', line: 1 }, astMaker);
            assert_1.default.deepEqual(astMaker.makeTag.getCall(0).args, ['@something', 1]);
        });
    });
});
//# sourceMappingURL=JSONTraverseTest.js.map