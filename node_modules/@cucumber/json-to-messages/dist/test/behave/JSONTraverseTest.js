"use strict";
/* eslint-disable @typescript-eslint/camelcase */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var messages_1 = require("@cucumber/messages");
var ts_sinon_1 = require("ts-sinon");
var JSONTraverse_1 = require("../../src/behave/JSONTraverse");
var util_1 = require("util");
describe('traverse elements', function () {
    context('traverseElement', function () {
        context('traversing a background', function () {
            var background = {
                status: 'passed',
                type: 'background',
                name: '',
                keyword: 'Background',
                location: 'my.feature:6',
                steps: [
                    {
                        step_type: 'given',
                        keyword: 'Given',
                        name: 'a passed step',
                        location: 'some.feature:3',
                        result: {
                            status: 'undefined',
                        },
                    },
                ],
            };
            it('does not produce a background - steps are repeated in the scenarios', function () {
                var astMaker = ts_sinon_1.stubInterface();
                var predictableSupportCode = ts_sinon_1.stubInterface();
                var step = messages_1.messages.GherkinDocument.Feature.Step.create({
                    id: 'step-id',
                });
                astMaker.makeStep.returns(step);
                var backgroundMsg = JSONTraverse_1.traverseElement(background, astMaker, function () { return 'new-id'; }, predictableSupportCode);
                assert_1.default.equal(astMaker.makeBackgroundFeatureChild.callCount, 0);
                assert_1.default.ok(util_1.isNullOrUndefined(backgroundMsg));
            });
        });
        context('traversing a scenario', function () {
            var scenario = {
                status: 'passed',
                type: 'scenario',
                name: 'My wonderful scenario',
                description: 'It even has a description',
                keyword: 'Scenario',
                location: 'my.feature:9',
                steps: [
                    {
                        step_type: 'given',
                        keyword: 'Given',
                        name: 'a passed step',
                        location: 'some.feature:3',
                        result: {
                            status: 'undefined',
                        },
                    },
                ],
            };
            it('uses AstMaker.makeScenarioFeatureChild to create the correct element', function () {
                var astMaker = ts_sinon_1.stubInterface();
                var predictableSupportCode = ts_sinon_1.stubInterface();
                var step = messages_1.messages.GherkinDocument.Feature.Step.create({
                    id: 'step-id',
                });
                astMaker.makeStep.returns(step);
                JSONTraverse_1.traverseElement(scenario, astMaker, function () { return 'new-id'; }, predictableSupportCode);
                assert_1.default.deepEqual(astMaker.makeScenarioFeatureChild.getCall(0).args, [
                    'new-id',
                    9,
                    'Scenario',
                    'My wonderful scenario',
                    'It even has a description',
                    [step],
                    undefined,
                ]);
            });
        });
    });
    context('traverseStep', function () {
        var simpleStep = {
            step_type: 'given',
            keyword: 'Given',
            name: 'a passed step',
            location: 'some.feature:3',
            match: {
                location: 'steps/some.py:5',
            },
            result: {
                status: 'failed',
                duration: 160,
                error_message: 'Oups, that did not work',
            },
        };
        var docStringStep = {
            step_type: 'given',
            keyword: 'Given',
            name: 'a passed step',
            location: 'some.feature:3',
            match: {
                location: 'steps/some.py:5',
            },
            result: {
                status: 'passed',
            },
            text: 'This is the docstring content',
        };
        var datatableStep = {
            step_type: 'given',
            keyword: 'Given',
            name: 'a passed step',
            location: 'some.feature:3',
            match: {
                location: 'steps/some.py:5',
            },
            result: {
                status: 'passed',
            },
            table: {
                headings: ['name', 'price'],
                rows: [
                    ['keyboard', '15'],
                    ['mouse', '10'],
                ],
            },
        };
        it('calls AstMaker.makeStep to produce the message', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var predictableSupportCode = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseStep(simpleStep, astMaker, function () { return 'some-id'; }, predictableSupportCode);
            assert_1.default.deepEqual(astMaker.makeStep.getCall(0).args, [
                'some-id',
                3,
                'Given ',
                'a passed step',
                null,
                null,
            ]);
        });
        it('uses the DocString generated by traverseDocstring if available', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var predictableSupportCode = ts_sinon_1.stubInterface();
            var docstring = messages_1.messages.GherkinDocument.Feature.Step.DocString.create();
            astMaker.makeDocstring.returns(docstring);
            JSONTraverse_1.traverseStep(docStringStep, astMaker, function () { return 'some-id'; }, predictableSupportCode);
            assert_1.default.deepEqual(astMaker.makeStep.getCall(0).args, [
                'some-id',
                3,
                'Given ',
                'a passed step',
                docstring,
                null,
            ]);
        });
        it('uses the DataTable generated by traverseTable if available', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var predictableSupportCode = ts_sinon_1.stubInterface();
            var datatable = messages_1.messages.GherkinDocument.Feature.Step.DataTable.create();
            astMaker.makeDataTable.returns(datatable);
            JSONTraverse_1.traverseStep(datatableStep, astMaker, function () { return 'some-id'; }, predictableSupportCode);
            assert_1.default.deepEqual(astMaker.makeStep.getCall(0).args, [
                'some-id',
                3,
                'Given ',
                'a passed step',
                null,
                datatable,
            ]);
        });
        it('registers a predictable sstep definition', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var predictableSupportCode = ts_sinon_1.stubInterface();
            astMaker.makeStep.returns(messages_1.messages.GherkinDocument.Feature.Step.create({
                id: 'some-id',
            }));
            JSONTraverse_1.traverseStep(simpleStep, astMaker, function () { return 'some-id'; }, predictableSupportCode);
            assert_1.default.deepEqual(predictableSupportCode.addPredictableStepDefinition.getCall(0).args, [
                'steps/some.py:5',
                'some-id',
                'failed',
                0.16,
                'Oups, that did not work',
            ]);
        });
    });
    context('traverseDocstring', function () {
        it('calls AstMaker.makeDocstring with only the text', function () {
            var astMaker = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseDocstring('This is a doc string', astMaker);
            assert_1.default.deepEqual(astMaker.makeDocstring.getCall(0).args, [
                null,
                'This is a doc string',
            ]);
        });
    });
    context('traverseTable', function () {
        var table = {
            headings: ['name', 'price'],
            rows: [
                ['keyboard', '15'],
                ['mouse', '10'],
            ],
        };
        it('calls AtMaker.makeDatatable to create the correct AST element', function () {
            var astMaker = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseTable(table, astMaker);
            assert_1.default.deepEqual(astMaker.makeDataTable.getCall(0).args, [
                [
                    ['name', 'price'],
                    ['keyboard', '15'],
                    ['mouse', '10'],
                ],
            ]);
        });
    });
});
//# sourceMappingURL=JSONTraverseTest.js.map