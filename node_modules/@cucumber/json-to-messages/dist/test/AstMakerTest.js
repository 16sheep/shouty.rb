"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var AstMaker_1 = __importDefault(require("../src/AstMaker"));
describe('AstMaker', function () {
    var astMaker = new AstMaker_1.default();
    describe('.makeFeature', function () {
        it('transforms the line to a Location object', function () {
            var feature = astMaker.makeFeature(12, '', '', '', []);
            assert_1.default.equal(feature.location.line, 12);
        });
    });
    describe('#makeBackgroundFeatureChild', function () {
        var child = astMaker.makeBackgroundFeatureChild(1, '', '', '', []);
        it('returns a child with a background', function () {
            assert_1.default.notEqual(child.background, null);
        });
        it('return a child without scenario', function () {
            assert_1.default.equal(child.scenario, null);
        });
        it('return a child without rule', function () {
            assert_1.default.equal(child.rule, null);
        });
    });
    context('#makeScenarioFeatureChild', function () {
        var child = astMaker.makeScenarioFeatureChild('id', 1, '', '', '', []);
        it('returns a child without background', function () {
            assert_1.default.equal(child.background, null);
        });
        it('return a child with a scenario', function () {
            assert_1.default.notEqual(child.scenario, null);
        });
        it('return a child without rule', function () {
            assert_1.default.equal(child.rule, null);
        });
        it('creates an ID for the scenario', function () {
            var child = astMaker.makeScenarioFeatureChild('id', 1, '', '', '', []);
            assert_1.default.equal(child.scenario.id, 'id');
        });
    });
    describe('makeStep', function () {
        it('generate an ID for the step', function () {
            var step = astMaker.makeStep('id', 10, 'Given ', 'some context');
            assert_1.default.equal(step.id, 'id');
        });
    });
});
//# sourceMappingURL=AstMakerTest.js.map