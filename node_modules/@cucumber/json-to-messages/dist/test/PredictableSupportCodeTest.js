"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var PredictableSupportCode_1 = __importDefault(require("../src/PredictableSupportCode"));
var messages_1 = require("@cucumber/messages");
var fake_cucumber_1 = require("@cucumber/fake-cucumber");
describe('PredictableSupportCode', function () {
    context('#addPredictableBeforeHook', function () {
        var supportCode = new fake_cucumber_1.SupportCode();
        var predictableSupportCode = new PredictableSupportCode_1.default(supportCode);
        var scenarioId = 'some-scenario-id';
        var pickle = messages_1.messages.Pickle.create({
            astNodeIds: [scenarioId],
        });
        beforeEach(function () {
            predictableSupportCode.addPredictableBeforeHook('some/where:7', scenarioId, 'passed');
        });
        it('adds a beforeHook', function () {
            assert_1.default.equal(supportCode.beforeHooks.length, 1);
        });
        it('adds a beforeHook that matches the pickle from the scenario', function () {
            var hook = supportCode.beforeHooks[0];
            assert_1.default.notEqual(hook.match(pickle), null);
        });
        it('adds a beforeHook with correct location', function () {
            var hook = supportCode.beforeHooks[0];
            assert_1.default.deepEqual(hook.toMessage().hook.sourceReference, messages_1.messages.SourceReference.create({
                uri: 'some/where',
                location: messages_1.messages.Location.create({
                    line: 7,
                }),
            }));
        });
        it('adds a hook with a passed status when status is "passed"', function () {
            var hook = supportCode.beforeHooks[0];
            assert_1.default.equal(hook.status, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED);
        });
        it('adds a hook with a failed status when status is "failed"', function () {
            var supportCode = new fake_cucumber_1.SupportCode();
            var predictableSupportCode2 = new PredictableSupportCode_1.default(supportCode);
            predictableSupportCode2.addPredictableBeforeHook('some/where:7', scenarioId, 'failed', 0.01, 'BOOM !!');
            var hook = supportCode.beforeHooks[0];
            assert_1.default.equal(hook.status, messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED);
            assert_1.default.equal(hook.errorMessage, 'BOOM !!');
            assert_1.default.equal(hook.duration, 0.01);
        });
    });
    context('#addPredictableAfterHook', function () {
        var supportCode = new fake_cucumber_1.SupportCode();
        var predictableSupportCode2 = new PredictableSupportCode_1.default(supportCode);
        var scenarioId = 'some-scenario-id';
        var pickle = messages_1.messages.Pickle.create({
            astNodeIds: [scenarioId],
        });
        beforeEach(function () {
            predictableSupportCode2.addPredictableAfterHook('some/where:7', scenarioId, 'passed');
        });
        it('adds a beforeHook', function () {
            assert_1.default.equal(supportCode.afterHooks.length, 1);
        });
        it('adds a beforeHook that matches the pickle from the scenario', function () {
            var hook = supportCode.afterHooks[0];
            assert_1.default.notEqual(hook.match(pickle), null);
        });
        it('adds a beforeHook with correct location', function () {
            var hook = supportCode.afterHooks[0];
            assert_1.default.deepEqual(hook.toMessage().hook.sourceReference, messages_1.messages.SourceReference.create({
                uri: 'some/where',
                location: messages_1.messages.Location.create({
                    line: 7,
                }),
            }));
        });
        it('adds a hook with a passed status when status is "passed"', function () {
            var hook = supportCode.afterHooks[0];
            assert_1.default.equal(hook.status, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED);
        });
        it('adds a hook with a failed status when status is "failed"', function () {
            var supportCode = new fake_cucumber_1.SupportCode();
            var predictableSupportCode2 = new PredictableSupportCode_1.default(supportCode);
            predictableSupportCode2.addPredictableAfterHook('some/where:7', scenarioId, 'failed', 0.12, 'BOOM !!');
            var hook = supportCode.afterHooks[0];
            assert_1.default.equal(hook.status, messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED);
            assert_1.default.equal(hook.errorMessage, 'BOOM !!');
            assert_1.default.equal(hook.duration, 0.12);
        });
    });
    context('.addPredictableStepDefinition', function () {
        var supportCode = new fake_cucumber_1.SupportCode();
        var predictableSupportCode = new PredictableSupportCode_1.default(supportCode);
        var stepId = 'some-step-id';
        var picklestep = messages_1.messages.Pickle.PickleStep.create({
            astNodeIds: [stepId],
        });
        beforeEach(function () {
            predictableSupportCode.addPredictableStepDefinition('somewhere/over/the/rain.bow:2', stepId, 'passed');
        });
        it('registers the step definition', function () {
            assert_1.default.equal(supportCode.stepDefinitions.length, 1);
        });
        it('creates a stepDefinition that matches the step id', function () {
            var stepDefinition = supportCode.stepDefinitions[0];
            assert_1.default.notEqual(stepDefinition.match(picklestep), null);
        });
        it('creates a stepDefinition with correct location', function () {
            var stepDefinition = supportCode.stepDefinitions[0];
            assert_1.default.deepEqual(stepDefinition.toMessage().stepDefinition.sourceReference, messages_1.messages.SourceReference.create({
                uri: 'somewhere/over/the/rain.bow',
                location: messages_1.messages.Location.create({
                    line: 2,
                }),
            }));
        });
        context('when a status is provided', function () {
            it('creates a StepDefinition with status passed for "passed"', function () {
                var supportCode = new fake_cucumber_1.SupportCode();
                var predictableSupportCode = new PredictableSupportCode_1.default(supportCode);
                predictableSupportCode.addPredictableStepDefinition('somewhere/over/the/rain.bow:2', stepId, 'passed');
                var stepDefinition = supportCode
                    .stepDefinitions[0];
                assert_1.default.equal(stepDefinition.status, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED);
            });
            it('creates a StepDefinition with status pending for "pending"', function () {
                var supportCode = new fake_cucumber_1.SupportCode();
                var predictableSupportCode = new PredictableSupportCode_1.default(supportCode);
                predictableSupportCode.addPredictableStepDefinition('somewhere/over/the/rain.bow:2', stepId, 'pending');
                var stepDefinition = supportCode
                    .stepDefinitions[0];
                assert_1.default.equal(stepDefinition.status, messages_1.messages.TestStepFinished.TestStepResult.Status.PENDING);
            });
            it('creates a StepDefinition with status failed for "failed"', function () {
                var supportCode = new fake_cucumber_1.SupportCode();
                var predictableSupportCode = new PredictableSupportCode_1.default(supportCode);
                predictableSupportCode.addPredictableStepDefinition('somewhere/over/the/rain.bow:2', stepId, 'failed', 1.23, 'something wrong happened');
                var stepDefinition = supportCode
                    .stepDefinitions[0];
                assert_1.default.equal(stepDefinition.status, messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED);
                assert_1.default.equal(stepDefinition.duration, 1.23);
            });
        });
    });
});
//# sourceMappingURL=PredictableSupportCodeTest.js.map