"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var messages_1 = require("@cucumber/messages");
var SupportCodeExecutor_1 = require("../src/SupportCodeExecutor");
var PredictableHook_1 = __importDefault(require("../src/PredictableHook"));
describe('PredictableHook', function () {
    var scenarioId = 'some-scenario-id';
    var pickle = messages_1.messages.Pickle.create({
        id: 'some-pickle-id',
        astNodeIds: [scenarioId],
    });
    context('.match', function () {
        it('returns null when the pickle doe not reference the scenario id', function () {
            var hook = new PredictableHook_1.default('some-hook-id', 'another-scenario', 'whatever:1', messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED, 123);
            assert_1.default.equal(hook.match(pickle), null);
        });
        it('returns a NilCodeExecutor when there is a match', function () {
            var hook = new PredictableHook_1.default('some-hook-id', scenarioId, 'whatever:1', messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED, 123);
            assert_1.default.ok(hook.match(pickle) instanceof SupportCodeExecutor_1.NilCodeExecutor);
        });
    });
    context('.toMessage', function () {
        it('returns the correct Location', function () {
            var hook = new PredictableHook_1.default('some-hook-id', 'another-scenario', 'path/to/steps.go:13', messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED, 123);
            var message = hook.toMessage().hook;
            assert_1.default.equal(message.sourceReference.uri, 'path/to/steps.go');
            assert_1.default.equal(message.sourceReference.location.line, 13);
        });
    });
});
//# sourceMappingURL=PredictableHookTest.js.map