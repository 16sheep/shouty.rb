"use strict";
/* eslint-disable @typescript-eslint/camelcase */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var messages_1 = require("@cucumber/messages");
var ts_sinon_1 = require("ts-sinon");
var JSONTraverse_1 = require("../../src/cucumber-ruby/JSONTraverse");
describe('traversing elements', function () {
    var simpleStep = {
        keyword: 'Given',
        name: ' some context',
        line: 10,
        match: {
            location: 'some/steps.rb:11',
        },
        result: {
            duration: 12300000,
            status: 'passed',
        },
    };
    var background = {
        id: 'my-background',
        type: 'background',
        keyword: 'Background',
        name: '',
        description: 'This background doe not much stuff',
        line: 3,
        steps: [],
    };
    var scenario = {
        id: 'my-scenario',
        type: 'scenario',
        keyword: 'Scenario',
        name: 'My scenario',
        description: 'This is my first scenario',
        line: 5,
        steps: [simpleStep],
    };
    describe('traverseFeature', function () {
        var feature = {
            uri: 'path/to/some.feature',
            id: 'my-feature',
            line: 2,
            keyword: 'Feature',
            name: 'My feature',
            description: 'It does things and stuff',
            elements: [scenario],
        };
        var emptyFeature = {
            uri: 'path/to/empty.feature',
            id: 'empty-feature',
            line: 1,
            keyword: 'Feature',
            name: 'An empty feature',
            description: 'It does nothing',
            elements: [],
        };
        var multiBackgroundFeature = {
            uri: 'path/to/some.feature',
            id: 'my-feature',
            line: 2,
            keyword: 'Feature',
            name: 'My feature',
            description: 'It does things and stuff',
            elements: [background, background, background],
        };
        it('calls AstMaker.makeFeature', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var predictableSupportCode = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseFeature(emptyFeature, astMaker, messages_1.IdGenerator.incrementing(), predictableSupportCode);
            assert_1.default.deepEqual(astMaker.makeFeature.getCall(0).args, [
                1,
                'Feature',
                'An empty feature',
                'It does nothing',
                [],
                undefined,
            ]);
        });
        it('uses the result of AstMaker.makeFeatureChild to populate the children', function () {
            var gherkinScenario = messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
                scenario: messages_1.messages.GherkinDocument.Feature.Scenario.create({
                    id: 'whatever-scenario-id',
                }),
            });
            var supportCode = ts_sinon_1.stubInterface();
            var astMaker = ts_sinon_1.stubInterface();
            astMaker.makeScenarioFeatureChild.returns(gherkinScenario);
            JSONTraverse_1.traverseFeature(feature, astMaker, messages_1.IdGenerator.incrementing(), supportCode);
            assert_1.default.deepEqual(astMaker.makeFeature.getCall(0).args, [
                2,
                'Feature',
                'My feature',
                'It does things and stuff',
                [gherkinScenario],
                undefined,
            ]);
        });
        it('calls AstMaker.makeGherkinDocument with the generated feature', function () {
            var gherkinFeature = messages_1.messages.GherkinDocument.Feature.create({
                name: 'My awesome feature',
            });
            var supportCode = ts_sinon_1.stubInterface();
            var astMaker = ts_sinon_1.stubInterface();
            astMaker.makeFeature.returns(gherkinFeature);
            JSONTraverse_1.traverseFeature(feature, astMaker, messages_1.IdGenerator.incrementing(), supportCode);
            assert_1.default.deepStrictEqual(astMaker.makeGherkinDocument.getCall(0).args, [
                'path/to/some.feature',
                gherkinFeature,
            ]);
        });
        it('does not traverse the backgrounds when replicated', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseFeature(multiBackgroundFeature, astMaker, messages_1.IdGenerator.incrementing(), supportCode);
            assert_1.default.ok(astMaker.makeBackgroundFeatureChild.calledOnce);
        });
    });
    describe('traverseElement', function () {
        it('calls AstMaker.makeFeatureChild with the correct data', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseElement(background, astMaker, messages_1.IdGenerator.incrementing(), supportCode);
            assert_1.default.deepEqual(astMaker.makeBackgroundFeatureChild.getCall(0).args, [
                3,
                'Background',
                '',
                'This background doe not much stuff',
                [],
            ]);
        });
        it('steps are created when intanciating the FeatureElement', function () {
            var step = messages_1.messages.GherkinDocument.Feature.Step.create({
                id: 'whatever-id',
            });
            var supportCode = ts_sinon_1.stubInterface();
            var astMaker = ts_sinon_1.stubInterface();
            astMaker.makeStep.returns(step);
            JSONTraverse_1.traverseElement(scenario, astMaker, messages_1.IdGenerator.incrementing(), supportCode);
            assert_1.default.deepStrictEqual(astMaker.makeScenarioFeatureChild.getCall(0).args[5], [step]);
        });
        it('registers hook if available', function () {
            var child = messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
                scenario: messages_1.messages.GherkinDocument.Feature.Scenario.create({
                    id: 'some-scenario-id',
                }),
            });
            var supportCode = ts_sinon_1.stubInterface();
            var astMaker = ts_sinon_1.stubInterface();
            astMaker.makeScenarioFeatureChild.returns(child);
            JSONTraverse_1.traverseElement({
                before: [
                    {
                        match: {
                            location: 'some/steps.rb:2',
                        },
                        result: {
                            status: 'passed',
                            duration: 12300,
                        },
                    },
                ],
                id: 'my-scenario',
                type: 'scenario',
                keyword: 'Scenario',
                name: 'My scenario',
                description: 'This is my first scenario',
                line: 5,
                steps: [simpleStep],
                after: [
                    {
                        match: {
                            location: 'some/steps.rb:12',
                        },
                        result: {
                            status: 'failed',
                            duration: 123000,
                            error_message: 'This has failed',
                        },
                    },
                ],
            }, astMaker, messages_1.IdGenerator.incrementing(), supportCode);
            assert_1.default.deepEqual(supportCode.addPredictableBeforeHook.getCall(0).args, [
                'some/steps.rb:2',
                child.scenario.id,
                'passed',
                0.0123,
                undefined,
            ]);
            assert_1.default.deepEqual(supportCode.addPredictableAfterHook.getCall(0).args, [
                'some/steps.rb:12',
                child.scenario.id,
                'failed',
                0.123,
                'This has failed',
            ]);
        });
    });
    describe('traverseStep', function () {
        var docStringStep = {
            keyword: 'Given',
            name: ' some context',
            line: 10,
            match: {
                location: 'some/steps.rb:11',
            },
            result: {
                duration: 123,
                status: 'whatever',
            },
            doc_string: {
                content_type: 'text/markdown',
                value: '# This is a title',
            },
        };
        var datatableStep = {
            keyword: 'Given',
            name: ' some context',
            line: 10,
            match: {
                location: 'some/steps.rb:11',
            },
            result: {
                duration: 123,
                status: 'whatever',
            },
            rows: [
                {
                    cells: ['a', 'b', 'c'],
                },
            ],
        };
        it('calls AstMaker.makeStep', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseStep(simpleStep, astMaker, function () { return 'the-id'; }, supportCode);
            assert_1.default.deepEqual(astMaker.makeStep.getCall(0).args, [
                'the-id',
                10,
                'Given',
                ' some context',
                null,
                null,
            ]);
        });
        it('passes on docstring is available', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseStep(docStringStep, astMaker, messages_1.IdGenerator.incrementing(), supportCode);
            assert_1.default.notStrictEqual(astMaker.makeStep.getCall(0).args[3], null);
        });
        it('passes on datatable is available', function () {
            var astMaker = ts_sinon_1.stubInterface();
            var supportCode = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseStep(datatableStep, astMaker, function () { return 'the-id'; }, supportCode);
            assert_1.default.notStrictEqual(astMaker.makeStep.getCall(0).args[5], null);
        });
        it('registers a stepDefinition using supportCode', function () {
            var step = messages_1.messages.GherkinDocument.Feature.Step.create({
                id: 'some-step-id',
            });
            var supportCode = ts_sinon_1.stubInterface();
            var astMaker = ts_sinon_1.stubInterface();
            astMaker.makeStep.returns(step);
            JSONTraverse_1.traverseStep(simpleStep, astMaker, messages_1.IdGenerator.incrementing(), supportCode);
            assert_1.default.deepEqual(supportCode.addPredictableStepDefinition.getCall(0).args, ['some/steps.rb:11', step.id, 'passed', 12.3, undefined]);
        });
        it('does not register stepDefinition when a step has no match', function () {
            var step = messages_1.messages.GherkinDocument.Feature.Step.create({
                id: 'some-step-id',
            });
            var supportCode = ts_sinon_1.stubInterface();
            var astMaker = ts_sinon_1.stubInterface();
            astMaker.makeStep.returns(step);
            JSONTraverse_1.traverseStep({
                keyword: 'Given',
                name: 'an undefined step',
                line: 10,
                result: {
                    status: 'undefined',
                },
            }, astMaker, messages_1.IdGenerator.incrementing(), supportCode);
            assert_1.default.equal(supportCode.addPredictableStepDefinition.callCount, 0);
        });
        it('does not register stepDefinition when a step has an empty match', function () {
            var step = messages_1.messages.GherkinDocument.Feature.Step.create({
                id: 'some-step-id',
            });
            var supportCode = ts_sinon_1.stubInterface();
            var astMaker = ts_sinon_1.stubInterface();
            astMaker.makeStep.returns(step);
            JSONTraverse_1.traverseStep({
                keyword: 'Given',
                name: 'an undefined step',
                line: 10,
                result: {
                    status: 'undefined',
                },
                match: {
                    location: undefined,
                },
            }, astMaker, messages_1.IdGenerator.incrementing(), supportCode);
            assert_1.default.equal(supportCode.addPredictableStepDefinition.callCount, 0);
        });
    });
    describe('traverseDocString', function () {
        var docString = {
            content_type: 'text/plain',
            value: 'Some random content',
        };
        it('calls AstMaker.makeDocString', function () {
            var astMaker = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseDocString(docString, astMaker);
            assert_1.default.equal(astMaker.makeDocstring.callCount, 1);
        });
    });
    describe('traverseDataTable', function () {
        var dataTable = [
            {
                cells: ['username', 'password'],
            },
            {
                cells: ['admin', '@dmin'],
            },
            {
                cells: ['user', 's3cr3t'],
            },
        ];
        it('calls AstMaker.makeDataTable', function () {
            var astMaker = ts_sinon_1.stubInterface();
            JSONTraverse_1.traverseDataTable(dataTable, astMaker);
            assert_1.default.deepEqual(astMaker.makeDataTable.getCall(0).args[0], [
                ['username', 'password'],
                ['admin', '@dmin'],
                ['user', 's3cr3t'],
            ]);
        });
    });
});
//# sourceMappingURL=JSONTraverseTest.js.map