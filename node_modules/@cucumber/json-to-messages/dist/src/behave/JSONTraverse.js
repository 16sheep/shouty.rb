"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var JSONTraverse_1 = require("../cucumber-generic/JSONTraverse");
function makeTags(tags) {
    return tags
        ? tags.map(function (tag) {
            return { name: "@" + tag };
        })
        : undefined;
}
function makeLine(location) {
    return parseInt(location.split(':')[1]);
}
function durationToMillis(duration) {
    return duration ? duration / 1000 : 0;
}
function makeGenericFeature(source) {
    var description = source.description ? source.description.join('\n') : '';
    var tags = makeTags(source.tags);
    return {
        uri: source.location.split(':')[0],
        id: '',
        line: makeLine(source.location),
        keyword: source.keyword,
        name: source.name,
        description: description,
        elements: source.elements,
        tags: tags,
    };
}
function traverseFeature(feature, astMaker, newId, predictableSupportCode) {
    return JSONTraverse_1.traverseFeature(makeGenericFeature(feature), astMaker, newId, predictableSupportCode, traverseElement);
}
exports.traverseFeature = traverseFeature;
function traverseElement(element, astMaker, newId, predictableSupportCode) {
    if (element.type === 'background') {
        return;
    }
    var tags = element.tags
        ? makeTags(element.tags).map(function (tag) { return JSONTraverse_1.traverseTag(tag, astMaker); })
        : undefined;
    return astMaker.makeScenarioFeatureChild(newId(), makeLine(element.location), element.keyword, element.name, element.description, element.steps.map(function (step) {
        return traverseStep(step, astMaker, newId, predictableSupportCode);
    }), tags);
}
exports.traverseElement = traverseElement;
function traverseStep(step, astMaker, newId, predictableSupportCode) {
    var line = makeLine(step.location);
    var docstring = step.text ? traverseDocstring(step.text, astMaker) : null;
    var datatable = step.table ? traverseTable(step.table, astMaker) : null;
    var gherkinStep = astMaker.makeStep(newId(), line, step.keyword + " ", step.name, docstring, datatable);
    if (gherkinStep && step.match) {
        predictableSupportCode.addPredictableStepDefinition(step.match.location, gherkinStep.id, step.result.status, durationToMillis(step.result.duration), step.result.error_message);
    }
    return gherkinStep;
}
exports.traverseStep = traverseStep;
function traverseDocstring(text, astMaker) {
    return astMaker.makeDocstring(null, text);
}
exports.traverseDocstring = traverseDocstring;
function traverseTable(table, astMaker) {
    var e_1, _a;
    var cells = [table.headings.map(function (head) { return head; })];
    try {
        for (var _b = __values(table.rows), _c = _b.next(); !_c.done; _c = _b.next()) {
            var row = _c.value;
            cells.push(row.map(function (cell) { return cell; }));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return astMaker.makeDataTable(cells);
}
exports.traverseTable = traverseTable;
//# sourceMappingURL=JSONTraverse.js.map