"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var JSONTraverse_1 = require("../cucumber-generic/JSONTraverse");
function durationToMillis(duration) {
    return duration ? duration / 1000000 : 0;
}
function traverseFeature(feature, astMaker, newId, predictableSupportCode) {
    return JSONTraverse_1.traverseFeature(feature, astMaker, newId, predictableSupportCode, traverseElement);
}
exports.traverseFeature = traverseFeature;
function traverseElement(element, astMaker, newId, predictableSupportCode) {
    var e_1, _a, e_2, _b;
    var child;
    switch (element.type) {
        case 'background':
            child = astMaker.makeBackgroundFeatureChild(element.line, element.keyword, element.name, element.description, element.steps.map(function (step) {
                return traverseStep(step, astMaker, newId, predictableSupportCode);
            }));
            break;
        case 'scenario': {
            var tags = element.tags
                ? element.tags.map(function (tag) { return JSONTraverse_1.traverseTag(tag, astMaker); })
                : undefined;
            child = astMaker.makeScenarioFeatureChild(newId(), element.line, element.keyword, element.name, element.description, element.steps.map(function (step) {
                return traverseStep(step, astMaker, newId, predictableSupportCode);
            }), tags);
            break;
        }
        default:
            throw new Error("Unsupported type for feature child: " + element.type);
    }
    if (element.before) {
        try {
            for (var _c = __values(element.before), _d = _c.next(); !_d.done; _d = _c.next()) {
                var beforeHook = _d.value;
                predictableSupportCode.addPredictableBeforeHook(beforeHook.match.location, child.scenario.id, beforeHook.result.status, durationToMillis(beforeHook.result.duration), beforeHook.result.error_message);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    if (element.after) {
        try {
            for (var _e = __values(element.after), _f = _e.next(); !_f.done; _f = _e.next()) {
                var afterHook = _f.value;
                predictableSupportCode.addPredictableAfterHook(afterHook.match.location, child.scenario.id, afterHook.result.status, durationToMillis(afterHook.result.duration), afterHook.result.error_message);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    return child;
}
exports.traverseElement = traverseElement;
function traverseStep(step, astMaker, newId, predictableSupportCode) {
    var docString = step.doc_string
        ? traverseDocString(step.doc_string, astMaker)
        : null;
    var dataTable = step.rows ? traverseDataTable(step.rows, astMaker) : null;
    var gherkinStep = astMaker.makeStep(newId(), step.line, step.keyword, step.name, docString, dataTable);
    if (gherkinStep && step.match && step.match.location) {
        predictableSupportCode.addPredictableStepDefinition(step.match.location, gherkinStep.id, step.result.status, durationToMillis(step.result.duration), step.result.error_message);
    }
    return gherkinStep;
}
exports.traverseStep = traverseStep;
function traverseDocString(docString, astMaker) {
    return astMaker.makeDocstring(docString.content_type, docString.value);
}
exports.traverseDocString = traverseDocString;
function traverseDataTable(rows, astMaker) {
    return astMaker.makeDataTable(rows.map(function (row) { return row.cells; }));
}
exports.traverseDataTable = traverseDataTable;
//# sourceMappingURL=JSONTraverse.js.map