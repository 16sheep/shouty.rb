"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var stream_1 = require("stream");
var SingleObjectWritableStream_1 = __importDefault(require("./stream/SingleObjectWritableStream"));
var JSONTransformStream_1 = __importDefault(require("./stream/JSONTransformStream"));
var fake_cucumber_1 = require("@cucumber/fake-cucumber");
var PredictableSupportCode_1 = __importDefault(require("./PredictableSupportCode"));
var gherkin_1 = require("@cucumber/gherkin");
var messages_1 = require("@cucumber/messages");
var AstMaker_1 = __importDefault(require("./AstMaker"));
var detectImplementation_1 = __importDefault(require("./detectImplementation"));
var JSONTraverse_1 = __importDefault(require("./JSONTraverse"));
var makePredictableTestPlan_1 = __importDefault(require("./test-generation/makePredictableTestPlan"));
var util_1 = require("util");
var asyncPipeline = util_1.promisify(stream_1.pipeline);
/**
 * This function is the main entry point when this tool is used as a library
 * (for example in a Web application)
 *
 * @param jsonReadable - a Readable stream containing vintage Cucumber JSON
 * @param messageWritable - a Writable stream where messages will be written
 * @param implementation - an explicit implementation, such as "behave", "javascript" or "ruby"
 */
function main(jsonReadable, messageWritable, implementation) {
    return __awaiter(this, void 0, void 0, function () {
        var singleObjectWritable, supportCode, predictableSupportCode, query, ndjsonStream, gherkinEnvelopeStream, astMaker, gherkinDocuments, gherkinDocuments_1, gherkinDocuments_1_1, gherkinDocument, pickles, pickles_1, pickles_1_1, pickle;
        var e_1, _a, e_2, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    singleObjectWritable = new SingleObjectWritableStream_1.default();
                    return [4 /*yield*/, asyncPipeline(jsonReadable, new JSONTransformStream_1.default(), singleObjectWritable)];
                case 1:
                    _c.sent();
                    supportCode = new fake_cucumber_1.SupportCode();
                    predictableSupportCode = new PredictableSupportCode_1.default(supportCode);
                    query = new gherkin_1.Query();
                    ndjsonStream = new messages_1.MessageToNdjsonStream();
                    gherkinEnvelopeStream = new stream_1.PassThrough({ objectMode: true });
                    astMaker = new AstMaker_1.default();
                    gherkinDocuments = singleObjectWritable.object.map(function (feature) {
                        return JSONTraverse_1.default(implementation || detectImplementation_1.default(feature), feature, astMaker, supportCode.newId, predictableSupportCode);
                    });
                    try {
                        for (gherkinDocuments_1 = __values(gherkinDocuments), gherkinDocuments_1_1 = gherkinDocuments_1.next(); !gherkinDocuments_1_1.done; gherkinDocuments_1_1 = gherkinDocuments_1.next()) {
                            gherkinDocument = gherkinDocuments_1_1.value;
                            gherkinEnvelopeStream.write(messages_1.messages.Envelope.create({ gherkinDocument: gherkinDocument }));
                            pickles = gherkin_1.compile(gherkinDocument, gherkinDocument.uri, supportCode.newId);
                            try {
                                for (pickles_1 = (e_2 = void 0, __values(pickles)), pickles_1_1 = pickles_1.next(); !pickles_1_1.done; pickles_1_1 = pickles_1.next()) {
                                    pickle = pickles_1_1.value;
                                    gherkinEnvelopeStream.write(messages_1.messages.Envelope.create({ pickle: pickle }));
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (pickles_1_1 && !pickles_1_1.done && (_b = pickles_1.return)) _b.call(pickles_1);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (gherkinDocuments_1_1 && !gherkinDocuments_1_1.done && (_a = gherkinDocuments_1.return)) _a.call(gherkinDocuments_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    gherkinEnvelopeStream.end();
                    ndjsonStream.pipe(messageWritable);
                    return [4 /*yield*/, fake_cucumber_1.runCucumber(supportCode, gherkinEnvelopeStream, query, ndjsonStream, makePredictableTestPlan_1.default)];
                case 2:
                    _c.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.default = main;
//# sourceMappingURL=jsonToMessages.js.map