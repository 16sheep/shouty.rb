import { messages } from '@cucumber/messages';
import { ITestStep, TestStep, IWorld, EnvelopeListener } from '@cucumber/fake-cucumber';
declare abstract class PredictableTestStep extends TestStep implements ITestStep {
    readonly id: string;
    readonly sourceId: string;
    readonly alwaysExecute: boolean;
    private readonly status;
    private readonly duration;
    private readonly errorMessage?;
    constructor(id: string, sourceId: string, alwaysExecute: boolean, status: messages.TestStepFinished.TestStepResult.Status, duration: number, errorMessage?: string);
    execute(_: IWorld, testCaseStartedId: string, listener: EnvelopeListener): Promise<messages.TestStepFinished.ITestStepResult>;
}
export declare class PredictablePickleTestStep extends PredictableTestStep {
    readonly id: string;
    readonly sourceId: string;
    readonly alwaysExecute: boolean;
    private readonly stepDefinitionId;
    constructor(id: string, sourceId: string, alwaysExecute: boolean, stepDefinitionId: string, status: messages.TestStepFinished.TestStepResult.Status, duration: number, errorMessage?: string);
    toMessage(): messages.TestCase.ITestStep;
}
export declare class PredictableHookTestStep extends PredictableTestStep {
    toMessage(): messages.TestCase.ITestStep;
}
export {};
