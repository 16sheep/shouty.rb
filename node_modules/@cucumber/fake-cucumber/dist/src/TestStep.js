"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var messages_1 = require("@cucumber/messages");
var makeAttach_1 = __importDefault(require("./makeAttach"));
var millisecondsToDuration = messages_1.TimeConversion.millisecondsToDuration, millisecondsSinceEpochToTimestamp = messages_1.TimeConversion.millisecondsSinceEpochToTimestamp;
var TestStep = /** @class */ (function () {
    function TestStep(id, sourceId, alwaysExecute, supportCodeExecutors, sourceFrames, clock, makeErrorMessage) {
        this.id = id;
        this.sourceId = sourceId;
        this.alwaysExecute = alwaysExecute;
        this.supportCodeExecutors = supportCodeExecutors;
        this.sourceFrames = sourceFrames;
        this.clock = clock;
        this.makeErrorMessage = makeErrorMessage;
    }
    TestStep.prototype.execute = function (world, testCaseStartedId, listener) {
        return __awaiter(this, void 0, void 0, function () {
            var start, duration, duration, result, finish, duration, error_1, finish, message, duration;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.emitTestStepStarted(testCaseStartedId, listener);
                        start = this.clock.now();
                        if (this.supportCodeExecutors.length === 0) {
                            duration = millisecondsToDuration(this.clock.now() - start);
                            return [2 /*return*/, this.emitTestStepFinished(testCaseStartedId, new messages_1.messages.TestStepFinished.TestStepResult({
                                    duration: duration,
                                    status: messages_1.messages.TestStepFinished.TestStepResult.Status.UNDEFINED,
                                }), listener)];
                        }
                        if (this.supportCodeExecutors.length > 1) {
                            duration = millisecondsToDuration(this.clock.now() - start);
                            return [2 /*return*/, this.emitTestStepFinished(testCaseStartedId, new messages_1.messages.TestStepFinished.TestStepResult({
                                    duration: duration,
                                    status: messages_1.messages.TestStepFinished.TestStepResult.Status.AMBIGUOUS,
                                }), listener)];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        world.attach = makeAttach_1.default(this.id, testCaseStartedId, listener);
                        world.log = function (text) {
                            world.attach(text, 'text/x.cucumber.log+plain');
                        };
                        return [4 /*yield*/, this.supportCodeExecutors[0].execute(world)];
                    case 2:
                        result = _a.sent();
                        finish = this.clock.now();
                        duration = millisecondsToDuration(finish - start);
                        return [2 /*return*/, this.emitTestStepFinished(testCaseStartedId, new messages_1.messages.TestStepFinished.TestStepResult({
                                duration: duration,
                                status: result === 'pending'
                                    ? messages_1.messages.TestStepFinished.TestStepResult.Status.PENDING
                                    : messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                            }), listener)];
                    case 3:
                        error_1 = _a.sent();
                        finish = this.clock.now();
                        message = this.makeErrorMessage(error_1, this.sourceFrames);
                        duration = millisecondsToDuration(finish - start);
                        return [2 /*return*/, this.emitTestStepFinished(testCaseStartedId, new messages_1.messages.TestStepFinished.TestStepResult({
                                duration: duration,
                                status: messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED,
                                message: message,
                            }), listener)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    TestStep.prototype.skip = function (listener, testCaseStartedId) {
        this.emitTestStepStarted(testCaseStartedId, listener);
        return this.emitTestStepFinished(testCaseStartedId, new messages_1.messages.TestStepFinished.TestStepResult({
            duration: millisecondsToDuration(0),
            status: messages_1.messages.TestStepFinished.TestStepResult.Status.SKIPPED,
        }), listener);
    };
    TestStep.prototype.emitTestStepStarted = function (testCaseStartedId, listener) {
        listener(new messages_1.messages.Envelope({
            testStepStarted: new messages_1.messages.TestStepStarted({
                testCaseStartedId: testCaseStartedId,
                testStepId: this.id,
                timestamp: millisecondsSinceEpochToTimestamp(this.clock.now()),
            }),
        }));
    };
    TestStep.prototype.emitTestStepFinished = function (testCaseStartedId, testStepResult, listener) {
        listener(new messages_1.messages.Envelope({
            testStepFinished: new messages_1.messages.TestStepFinished({
                testCaseStartedId: testCaseStartedId,
                testStepId: this.id,
                testStepResult: testStepResult,
                timestamp: millisecondsSinceEpochToTimestamp(this.clock.now()),
            }),
        }));
        return testStepResult;
    };
    return TestStep;
}());
exports.default = TestStep;
//# sourceMappingURL=TestStep.js.map