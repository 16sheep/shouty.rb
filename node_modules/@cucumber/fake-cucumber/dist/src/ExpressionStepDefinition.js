"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var SupportCodeExecutor_1 = __importDefault(require("./SupportCodeExecutor"));
var cucumber_expressions_1 = require("@cucumber/cucumber-expressions");
var messages_1 = require("@cucumber/messages");
var ExpressionStepDefinition = /** @class */ (function () {
    function ExpressionStepDefinition(id, expression, sourceReference, body) {
        this.id = id;
        this.expression = expression;
        this.sourceReference = sourceReference;
        this.body = body;
    }
    ExpressionStepDefinition.prototype.match = function (pickleStep) {
        var expressionArgs = this.expression.match(pickleStep.text);
        return expressionArgs === null
            ? null
            : new SupportCodeExecutor_1.default(this.id, this.body, expressionArgs, pickleStep.argument && pickleStep.argument.docString, pickleStep.argument && pickleStep.argument.dataTable);
    };
    ExpressionStepDefinition.prototype.toMessage = function () {
        return new messages_1.messages.Envelope({
            stepDefinition: new messages_1.messages.StepDefinition({
                id: this.id,
                pattern: new messages_1.messages.StepDefinition.StepDefinitionPattern({
                    type: this.expressionType(),
                    source: this.expression.source,
                }),
                sourceReference: this.sourceReference,
            }),
        });
    };
    ExpressionStepDefinition.prototype.expressionType = function () {
        if (this.expression instanceof cucumber_expressions_1.CucumberExpression) {
            return messages_1.messages.StepDefinition.StepDefinitionPattern
                .StepDefinitionPatternType.CUCUMBER_EXPRESSION;
        }
        else if (this.expression instanceof cucumber_expressions_1.RegularExpression) {
            return messages_1.messages.StepDefinition.StepDefinitionPattern
                .StepDefinitionPatternType.REGULAR_EXPRESSION;
        }
        else {
            throw new Error("Unknown expression type: " + this.expression.constructor.name);
        }
    };
    return ExpressionStepDefinition;
}());
exports.default = ExpressionStepDefinition;
//# sourceMappingURL=ExpressionStepDefinition.js.map