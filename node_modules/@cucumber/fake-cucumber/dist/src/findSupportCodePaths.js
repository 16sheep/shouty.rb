"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var glob_1 = __importDefault(require("glob"));
var util_1 = require("util");
var globPromise = util_1.promisify(glob_1.default);
function globCode(dir) {
    // TODO: Provide a way to configure the glob
    return globPromise(dir + "/**/*.{js,ts}");
}
function findSupportCodePaths(paths) {
    return __awaiter(this, void 0, void 0, function () {
        var files, paths_1, paths_1_1, path, stats, codePaths, codePaths_1, codePaths_1_1, codePath, dir, codePaths, codePaths_2, codePaths_2_1, codePath, e_1_1;
        var e_1, _a, e_2, _b, e_3, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    files = new Set();
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 9, 10, 11]);
                    paths_1 = __values(paths), paths_1_1 = paths_1.next();
                    _d.label = 2;
                case 2:
                    if (!!paths_1_1.done) return [3 /*break*/, 8];
                    path = paths_1_1.value;
                    stats = fs_1.default.lstatSync(path);
                    if (!stats.isDirectory()) return [3 /*break*/, 4];
                    return [4 /*yield*/, globCode(path)];
                case 3:
                    codePaths = _d.sent();
                    try {
                        for (codePaths_1 = (e_2 = void 0, __values(codePaths)), codePaths_1_1 = codePaths_1.next(); !codePaths_1_1.done; codePaths_1_1 = codePaths_1.next()) {
                            codePath = codePaths_1_1.value;
                            files.add(path_1.default.resolve(codePath));
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (codePaths_1_1 && !codePaths_1_1.done && (_b = codePaths_1.return)) _b.call(codePaths_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    return [3 /*break*/, 7];
                case 4:
                    if (!stats.isFile()) return [3 /*break*/, 6];
                    dir = path_1.default.dirname(path);
                    return [4 /*yield*/, globCode(dir)];
                case 5:
                    codePaths = _d.sent();
                    if (codePaths.includes(path)) {
                        files.add(path_1.default.resolve(path));
                    }
                    else {
                        try {
                            for (codePaths_2 = (e_3 = void 0, __values(codePaths)), codePaths_2_1 = codePaths_2.next(); !codePaths_2_1.done; codePaths_2_1 = codePaths_2.next()) {
                                codePath = codePaths_2_1.value;
                                files.add(path_1.default.resolve(codePath));
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (codePaths_2_1 && !codePaths_2_1.done && (_c = codePaths_2.return)) _c.call(codePaths_2);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                    return [3 /*break*/, 7];
                case 6: throw new Error("Can't load " + path + " - it is not a regular file or directory");
                case 7:
                    paths_1_1 = paths_1.next();
                    return [3 /*break*/, 2];
                case 8: return [3 /*break*/, 11];
                case 9:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 11];
                case 10:
                    try {
                        if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 11: return [2 /*return*/, Array.from(files).sort()];
            }
        });
    });
}
exports.default = findSupportCodePaths;
//# sourceMappingURL=findSupportCodePaths.js.map