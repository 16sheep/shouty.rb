import { messages } from '@cucumber/messages';
import ISupportCodeExecutor from './ISupportCodeExecutor';
import { EnvelopeListener } from './types';
import ITestStep from './ITestStep';
import IWorld from './IWorld';
import IClock from './IClock';
import { MakeErrorMessage } from './ErrorMessageGenerator';
export default abstract class TestStep implements ITestStep {
    readonly id: string;
    readonly sourceId: string;
    readonly alwaysExecute: boolean;
    protected readonly supportCodeExecutors: ReadonlyArray<ISupportCodeExecutor>;
    private readonly sourceFrames;
    private readonly clock;
    private readonly makeErrorMessage;
    constructor(id: string, sourceId: string, alwaysExecute: boolean, supportCodeExecutors: ReadonlyArray<ISupportCodeExecutor>, sourceFrames: ReadonlyArray<string>, clock: IClock, makeErrorMessage: MakeErrorMessage);
    abstract toMessage(): messages.TestCase.ITestStep;
    execute(world: IWorld, testCaseStartedId: string, listener: EnvelopeListener): Promise<messages.TestStepFinished.ITestStepResult>;
    skip(listener: EnvelopeListener, testCaseStartedId: string): messages.TestStepFinished.ITestStepResult;
    protected emitTestStepStarted(testCaseStartedId: string, listener: EnvelopeListener): void;
    protected emitTestStepFinished(testCaseStartedId: string, testStepResult: messages.TestStepFinished.ITestStepResult, listener: EnvelopeListener): messages.TestStepFinished.ITestStepResult;
}
