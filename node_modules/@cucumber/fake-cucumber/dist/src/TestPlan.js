"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var messages_1 = require("@cucumber/messages");
var TestPlan = /** @class */ (function () {
    function TestPlan(testCases, supportCode) {
        this.testCases = testCases;
        this.supportCode = supportCode;
    }
    TestPlan.prototype.execute = function (listener) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, parameterTypeMessage, _c, _d, stepDefinition, _e, _f, undefinedParameterType, _g, _h, hook, _j, _k, hook, _l, _m, testCase, _o, _p, testCase, e_1_1;
            var e_2, _q, e_3, _r, e_4, _s, e_5, _t, e_6, _u, e_7, _v, e_1, _w;
            return __generator(this, function (_x) {
                switch (_x.label) {
                    case 0:
                        try {
                            for (_a = __values(this.supportCode.parameterTypeMessages), _b = _a.next(); !_b.done; _b = _a.next()) {
                                parameterTypeMessage = _b.value;
                                listener(parameterTypeMessage);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_q = _a.return)) _q.call(_a);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        try {
                            for (_c = __values(this.supportCode.stepDefinitions), _d = _c.next(); !_d.done; _d = _c.next()) {
                                stepDefinition = _d.value;
                                listener(stepDefinition.toMessage());
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_r = _c.return)) _r.call(_c);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        try {
                            for (_e = __values(this.supportCode
                                .undefinedParameterTypeMessages), _f = _e.next(); !_f.done; _f = _e.next()) {
                                undefinedParameterType = _f.value;
                                listener(undefinedParameterType);
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_s = _e.return)) _s.call(_e);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        try {
                            for (_g = __values(this.supportCode.beforeHooks), _h = _g.next(); !_h.done; _h = _g.next()) {
                                hook = _h.value;
                                listener(hook.toMessage());
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (_h && !_h.done && (_t = _g.return)) _t.call(_g);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                        try {
                            for (_j = __values(this.supportCode.afterHooks), _k = _j.next(); !_k.done; _k = _j.next()) {
                                hook = _k.value;
                                listener(hook.toMessage());
                            }
                        }
                        catch (e_6_1) { e_6 = { error: e_6_1 }; }
                        finally {
                            try {
                                if (_k && !_k.done && (_u = _j.return)) _u.call(_j);
                            }
                            finally { if (e_6) throw e_6.error; }
                        }
                        listener(new messages_1.messages.Envelope({
                            testRunStarted: new messages_1.messages.TestRunStarted({
                                timestamp: messages_1.TimeConversion.millisecondsSinceEpochToTimestamp(this.supportCode.clock.now()),
                            }),
                        }));
                        try {
                            for (_l = __values(this.testCases), _m = _l.next(); !_m.done; _m = _l.next()) {
                                testCase = _m.value;
                                listener(testCase.toMessage());
                            }
                        }
                        catch (e_7_1) { e_7 = { error: e_7_1 }; }
                        finally {
                            try {
                                if (_m && !_m.done && (_v = _l.return)) _v.call(_l);
                            }
                            finally { if (e_7) throw e_7.error; }
                        }
                        _x.label = 1;
                    case 1:
                        _x.trys.push([1, 6, 7, 8]);
                        _o = __values(this.testCases), _p = _o.next();
                        _x.label = 2;
                    case 2:
                        if (!!_p.done) return [3 /*break*/, 5];
                        testCase = _p.value;
                        return [4 /*yield*/, testCase.execute(listener, 0, this.supportCode.newId())];
                    case 3:
                        _x.sent();
                        _x.label = 4;
                    case 4:
                        _p = _o.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _x.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_p && !_p.done && (_w = _o.return)) _w.call(_o);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        listener(new messages_1.messages.Envelope({
                            testRunFinished: new messages_1.messages.TestRunFinished({
                                timestamp: messages_1.TimeConversion.millisecondsSinceEpochToTimestamp(this.supportCode.clock.now()),
                            }),
                        }));
                        return [2 /*return*/];
                }
            });
        });
    };
    return TestPlan;
}());
exports.default = TestPlan;
//# sourceMappingURL=TestPlan.js.map