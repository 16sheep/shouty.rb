"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var stack_utils_1 = __importDefault(require("stack-utils"));
function withFullStackTrace() {
    var stack = new stack_utils_1.default({
        cwd: process.cwd(),
        internals: __spread(stack_utils_1.default.nodeInternals(), [
            // Exclude ourself from stack traces in case we're npm link'ed
            /\s*at .*[/]fake-cucumber[/]/,
        ]),
    });
    return function (error, sourceFrames) {
        var trace = stack
            .clean(error.stack)
            .trim()
            .split('\n')
            .concat(sourceFrames)
            .map(function (frame) { return "    at " + frame; })
            .join('\n');
        return error.message + "\n" + trace;
    };
}
exports.withFullStackTrace = withFullStackTrace;
function withSourceFramesOnlyStackTrace() {
    return function (error, sourceFrames) {
        return __spread([error.message], sourceFrames).join('\n');
    };
}
exports.withSourceFramesOnlyStackTrace = withSourceFramesOnlyStackTrace;
//# sourceMappingURL=ErrorMessageGenerator.js.map