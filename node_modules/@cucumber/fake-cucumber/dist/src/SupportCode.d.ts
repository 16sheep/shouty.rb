import { ParameterType } from '@cucumber/cucumber-expressions';
import { IdGenerator, messages } from '@cucumber/messages';
import { AnyBody } from './types';
import IStepDefinition from './IStepDefinition';
import IHook from './IHook';
import IClock from './IClock';
import { MakeErrorMessage } from './ErrorMessageGenerator';
import IParameterTypeDefinition from './IParameterTypeDefinition';
/**
 * This class provides an API for defining step definitions and hooks.
 */
export default class SupportCode {
    readonly newId: IdGenerator.NewId;
    readonly clock: IClock;
    readonly makeErrorMessage: MakeErrorMessage;
    readonly parameterTypes: Array<ParameterType<any>>;
    readonly parameterTypeMessages: Array<messages.IEnvelope>;
    readonly stepDefinitions: IStepDefinition[];
    readonly beforeHooks: IHook[];
    readonly afterHooks: IHook[];
    private readonly parameterTypeRegistry;
    private readonly expressionFactory;
    readonly undefinedParameterTypeMessages: messages.IEnvelope[];
    constructor(newId?: IdGenerator.NewId, clock?: IClock, makeErrorMessage?: MakeErrorMessage);
    defineParameterType(parameterTypeDefinition: IParameterTypeDefinition): void;
    defineStepDefinition(sourceReference: messages.ISourceReference, expression: string | RegExp, body: AnyBody): void;
    registerStepDefinition(stepDefinition: IStepDefinition): void;
    defineBeforeHook(sourceReference: messages.ISourceReference, tagExpressionOrBody: string | AnyBody, body?: AnyBody): void;
    registerBeforeHook(hook: IHook): void;
    defineAfterHook(sourceReference: messages.ISourceReference, tagExpressionOrBody: string | AnyBody, body?: AnyBody): void;
    registerAfterHook(hook: IHook): void;
    private makeHook;
}
