"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var messages_1 = require("@cucumber/messages");
var DataTable_1 = __importDefault(require("./DataTable"));
var SupportCodeExecutor = /** @class */ (function () {
    function SupportCodeExecutor(stepDefinitionId, body, args, docString, dataTable) {
        this.stepDefinitionId = stepDefinitionId;
        this.body = body;
        this.args = args;
        this.docString = docString;
        this.dataTable = dataTable;
    }
    SupportCodeExecutor.prototype.execute = function (thisObj) {
        var argArray = this.args.map(function (arg) { return arg.getValue(thisObj); });
        if (this.docString) {
            // TODO: Hand off to DocStringTransformer
            argArray.push(this.docString.content);
        }
        if (this.dataTable) {
            argArray.push(new DataTable_1.default(this.dataTable.rows.map(function (r) { return r.cells.map(function (c) { return c.value; }); })));
        }
        return this.body.apply(thisObj, argArray);
    };
    SupportCodeExecutor.prototype.argsToMessages = function () {
        return this.args.map(function (arg) {
            return new messages_1.messages.TestCase.TestStep.StepMatchArgumentsList.StepMatchArgument({
                group: toMessageGroup(arg.group),
                parameterTypeName: arg.parameterType.name,
            });
        });
    };
    return SupportCodeExecutor;
}());
exports.default = SupportCodeExecutor;
function toMessageGroup(group) {
    return new messages_1.messages.TestCase.TestStep.StepMatchArgumentsList.StepMatchArgument.Group({
        value: group.value,
        start: group.start,
        children: group.children.map(function (g) { return toMessageGroup(g); }),
    });
}
//# sourceMappingURL=SupportCodeExecutor.js.map