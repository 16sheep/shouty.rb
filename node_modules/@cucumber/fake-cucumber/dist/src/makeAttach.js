"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var messages_1 = require("@cucumber/messages");
var events_1 = require("events");
function makeAttach(testStepId, testCaseStartedId, listener) {
    return function attach(data, mediaType) {
        var attachment = new messages_1.messages.Attachment({
            testStepId: testStepId,
            testCaseStartedId: testCaseStartedId,
            mediaType: mediaType,
        });
        if (typeof data === 'string') {
            attachment.body = data;
            attachment.contentEncoding = messages_1.messages.Attachment.ContentEncoding.IDENTITY;
            listener(new messages_1.messages.Envelope({
                attachment: attachment,
            }));
        }
        else if (Buffer.isBuffer(data)) {
            attachment.body = data.toString('base64');
            attachment.contentEncoding = messages_1.messages.Attachment.ContentEncoding.BASE64;
            listener(new messages_1.messages.Envelope({
                attachment: attachment,
            }));
        }
        else if (data instanceof events_1.EventEmitter &&
            // @ts-ignore
            typeof data.read === 'function') {
            // @ts-ignore
            var stream_1 = data;
            return new Promise(function (resolve, reject) {
                var buf = Buffer.alloc(0);
                stream_1.on('data', function (chunk) {
                    if (!Buffer.isBuffer(chunk)) {
                        stream_1.destroy(new Error("Can only attach binary streams"));
                        return;
                    }
                    buf = Buffer.concat([buf, chunk]);
                });
                stream_1.on('end', function () {
                    attachment.body = buf.toString('base64');
                    attachment.contentEncoding =
                        messages_1.messages.Attachment.ContentEncoding.BASE64;
                    listener(new messages_1.messages.Envelope({
                        attachment: attachment,
                    }));
                    resolve();
                });
                stream_1.on('error', reject);
            });
        }
        else {
            throw new Error("data must be string, Buffer or Readable");
        }
    };
}
exports.default = makeAttach;
//# sourceMappingURL=makeAttach.js.map