"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var messages_1 = require("@cucumber/messages");
var makePickleTestStep_1 = __importDefault(require("../src/makePickleTestStep"));
var TestWorld_1 = __importDefault(require("./TestWorld"));
var IncrementClock_1 = __importDefault(require("../src/IncrementClock"));
var ErrorMessageGenerator_1 = require("../src/ErrorMessageGenerator");
var ExpressionStepDefinition_1 = __importDefault(require("../src/ExpressionStepDefinition"));
var cucumber_expressions_1 = require("@cucumber/cucumber-expressions");
describe('TestStep', function () {
    var world;
    beforeEach(function () { return (world = new TestWorld_1.default()); });
    function execute(testStep) {
        return __awaiter(this, void 0, void 0, function () {
            var receivedMessages;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        receivedMessages = [];
                        return [4 /*yield*/, testStep.execute(world, 'some-testCaseStartedId', function (message) {
                                return receivedMessages.push(message);
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, receivedMessages.pop().testStepFinished];
                }
            });
        });
    }
    describe('#execute', function () {
        it('emits a TestStepFinished with status UNDEFINED when there are no matching step definitions', function () { return __awaiter(void 0, void 0, void 0, function () {
            var testStep, testStepFinished;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        testStep = makePickleTestStep_1.default('some-test-step-id', messages_1.messages.Pickle.PickleStep.create({
                            text: 'an undefined step',
                        }), [], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace());
                        return [4 /*yield*/, execute(testStep)];
                    case 1:
                        testStepFinished = _a.sent();
                        assert_1.default.strictEqual(testStepFinished.testStepResult.status, messages_1.messages.TestStepFinished.TestStepResult.Status.UNDEFINED);
                        assert_1.default.notEqual(testStepFinished.testStepResult.duration, null);
                        assert_1.default.strictEqual(testStepFinished.testStepId, testStep.id);
                        return [2 /*return*/];
                }
            });
        }); });
        it('emits a TestStepFinished with status AMBIGUOUS when there are multiple matching step definitions', function () { return __awaiter(void 0, void 0, void 0, function () {
            var stepDefinition, testStep, testStepFinished;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stepDefinition = new ExpressionStepDefinition_1.default('an-id', new cucumber_expressions_1.CucumberExpression('an ambiguous step', new cucumber_expressions_1.ParameterTypeRegistry()), null, function () {
                            throw new Error('Should now be run');
                        });
                        testStep = makePickleTestStep_1.default('some-test-step-id', messages_1.messages.Pickle.PickleStep.create({
                            text: 'an ambiguous step',
                        }), [stepDefinition, stepDefinition], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace());
                        return [4 /*yield*/, execute(testStep)];
                    case 1:
                        testStepFinished = _a.sent();
                        assert_1.default.strictEqual(testStepFinished.testStepResult.status, messages_1.messages.TestStepFinished.TestStepResult.Status.AMBIGUOUS);
                        assert_1.default.notEqual(testStepFinished.testStepResult.duration, null);
                        assert_1.default.strictEqual(testStepFinished.testStepId, testStep.id);
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns a TestStepResult object with the status', function () { return __awaiter(void 0, void 0, void 0, function () {
            var testStep, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        testStep = makePickleTestStep_1.default('some-test-step-id', messages_1.messages.Pickle.PickleStep.create({
                            text: 'an undefined step',
                        }), [], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace());
                        return [4 /*yield*/, testStep.execute(world, 'some-testCaseStartedId', function () { return null; })];
                    case 1:
                        result = _a.sent();
                        assert_1.default.strictEqual(result.status, messages_1.messages.TestStepFinished.TestStepResult.Status.UNDEFINED);
                        return [2 /*return*/];
                }
            });
        }); });
        it('computes the execution duration', function () { return __awaiter(void 0, void 0, void 0, function () {
            var emitted, testStep, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        emitted = [];
                        testStep = makePickleTestStep_1.default('some-test-step-id', messages_1.messages.Pickle.PickleStep.create({
                            text: 'a passed step',
                        }), [
                            new ExpressionStepDefinition_1.default('an-id', new cucumber_expressions_1.CucumberExpression('a passed step', new cucumber_expressions_1.ParameterTypeRegistry()), null, function () { return null; }),
                        ], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace());
                        return [4 /*yield*/, testStep.execute(world, 'some-id', function (message) {
                                return emitted.push(message);
                            })];
                    case 1:
                        _a.sent();
                        result = emitted.find(function (m) { return m.testStepFinished; }).testStepFinished
                            .testStepResult;
                        assert_1.default.strictEqual(result.duration.seconds, 0);
                        return [2 /*return*/];
                }
            });
        }); });
        context('when there is a matching step definition', function () {
            it('emits a TestStepFinished with status PASSED when no exception is raised', function () { return __awaiter(void 0, void 0, void 0, function () {
                var testStep, testStepFinished;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            testStep = makePickleTestStep_1.default('some-test-step-id', messages_1.messages.Pickle.PickleStep.create({
                                text: 'a passed step',
                            }), [
                                new ExpressionStepDefinition_1.default('an-id', new cucumber_expressions_1.CucumberExpression('a passed step', new cucumber_expressions_1.ParameterTypeRegistry()), null, function () { return null; }),
                            ], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace());
                            return [4 /*yield*/, execute(testStep)];
                        case 1:
                            testStepFinished = _a.sent();
                            assert_1.default.strictEqual(testStepFinished.testStepResult.status, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED);
                            assert_1.default.strictEqual(testStepFinished.testStepId, testStep.id);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('emits a TestStepFinished with status PENDING when the string "pending" is returned', function () { return __awaiter(void 0, void 0, void 0, function () {
                var testStep, testStepFinished;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            testStep = makePickleTestStep_1.default('some-test-step-id', messages_1.messages.Pickle.PickleStep.create({
                                text: 'a pending step',
                            }), [
                                new ExpressionStepDefinition_1.default('an-id', new cucumber_expressions_1.CucumberExpression('a pending step', new cucumber_expressions_1.ParameterTypeRegistry()), null, function () { return 'pending'; }),
                            ], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace());
                            return [4 /*yield*/, execute(testStep)];
                        case 1:
                            testStepFinished = _a.sent();
                            assert_1.default.strictEqual(testStepFinished.testStepResult.status, messages_1.messages.TestStepFinished.TestStepResult.Status.PENDING);
                            assert_1.default.strictEqual(testStepFinished.testStepId, testStep.id);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('emits a TestStepFinished with status FAILED when an exception is raised', function () { return __awaiter(void 0, void 0, void 0, function () {
                var testStep, testStepFinished;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            testStep = makePickleTestStep_1.default('some-test-step-id', messages_1.messages.Pickle.PickleStep.create({
                                text: 'a failed step',
                            }), [
                                new ExpressionStepDefinition_1.default('an-id', new cucumber_expressions_1.CucumberExpression('a failed step', new cucumber_expressions_1.ParameterTypeRegistry()), null, function () {
                                    throw new Error('This step has failed');
                                }),
                            ], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace());
                            return [4 /*yield*/, execute(testStep)];
                        case 1:
                            testStepFinished = _a.sent();
                            assert_1.default.strictEqual(testStepFinished.testStepResult.status, messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED);
                            assert_1.default.strictEqual(testStepFinished.testStepId, testStep.id);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('adds the exception stack trace to the result', function () { return __awaiter(void 0, void 0, void 0, function () {
                var testStep, testStepFinished;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            testStep = makePickleTestStep_1.default('some-test-step-id', messages_1.messages.Pickle.PickleStep.create({
                                text: 'a failed step',
                            }), [
                                new ExpressionStepDefinition_1.default('an-id', new cucumber_expressions_1.CucumberExpression('a failed step', new cucumber_expressions_1.ParameterTypeRegistry()), null, function () {
                                    throw new Error('Something went wrong');
                                }),
                            ], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withFullStackTrace());
                            return [4 /*yield*/, execute(testStep)];
                        case 1:
                            testStepFinished = _a.sent();
                            assert_1.default.ok(testStepFinished.testStepResult.message.includes('Something went wrong'));
                            assert_1.default.ok(testStepFinished.testStepResult.message.includes('at some.feature:123'));
                            return [2 /*return*/];
                    }
                });
            }); });
            it('emits a TestStepFinished with error message from docstring', function () { return __awaiter(void 0, void 0, void 0, function () {
                var docString, testStep, testStepFinished;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            docString = new messages_1.messages.PickleStepArgument.PickleDocString({
                                content: 'hello',
                            });
                            testStep = makePickleTestStep_1.default('some-test-step-id', messages_1.messages.Pickle.PickleStep.create({
                                text: 'a passed step',
                                argument: new messages_1.messages.PickleStepArgument({
                                    docString: docString,
                                }),
                            }), [
                                new ExpressionStepDefinition_1.default('an-id', new cucumber_expressions_1.RegularExpression(/.*/, new cucumber_expressions_1.ParameterTypeRegistry()), null, function (docStringArg) {
                                    throw new Error("error from " + docStringArg);
                                }),
                            ], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace());
                            return [4 /*yield*/, execute(testStep)];
                        case 1:
                            testStepFinished = _a.sent();
                            assert_1.default.ok(testStepFinished.testStepResult.message.includes('error from hello'));
                            assert_1.default.strictEqual(testStepFinished.testStepId, testStep.id);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
    describe('#skip', function () {
        var testStep;
        var receivedMessages;
        beforeEach(function () {
            testStep = makePickleTestStep_1.default('some-test-step-id', messages_1.messages.Pickle.PickleStep.create({
                text: 'an undefined step',
            }), [], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace());
            receivedMessages = [];
        });
        it('emits a TestStepStarted message', function () {
            testStep.skip(function (message) { return receivedMessages.push(message); }, 'test-case-started-id');
            var testStepStarted = receivedMessages.find(function (m) { return m.testStepStarted; })
                .testStepStarted;
            assert_1.default.strictEqual(testStepStarted.testStepId, testStep.id);
        });
        it('emits a TestStepFinished message with a duration of 0', function () {
            testStep.skip(function (message) { return receivedMessages.push(message); }, 'test-case-started-id');
            var testStepFinished = receivedMessages.find(function (m) { return m.testStepFinished; })
                .testStepFinished;
            assert_1.default.strictEqual(testStepFinished.testStepResult.duration.seconds, 0);
            assert_1.default.strictEqual(testStepFinished.testStepResult.duration.nanos, 0);
        });
        it('emits a TestStepFinished message with a result SKIPPED', function () {
            testStep.skip(function (message) { return receivedMessages.push(message); }, 'test-case-started-id');
            var testStepFinished = receivedMessages.find(function (m) { return m.testStepFinished; })
                .testStepFinished;
            assert_1.default.strictEqual(testStepFinished.testStepResult.status, messages_1.messages.TestStepFinished.TestStepResult.Status.SKIPPED);
        });
    });
});
//# sourceMappingURL=TestStepTest.js.map