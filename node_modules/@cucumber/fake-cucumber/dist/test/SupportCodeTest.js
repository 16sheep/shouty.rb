"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var SupportCode_1 = __importDefault(require("../src/SupportCode"));
var messages_1 = require("@cucumber/messages");
var IncrementClock_1 = __importDefault(require("../src/IncrementClock"));
var ErrorMessageGenerator_1 = require("../src/ErrorMessageGenerator");
var assert_1 = __importDefault(require("assert"));
describe('SupportCode', function () {
    it('allows no tags', function () {
        var supportCode = new SupportCode_1.default(messages_1.IdGenerator.incrementing(), new IncrementClock_1.default(), ErrorMessageGenerator_1.withFullStackTrace());
        var error = new Error('In Body');
        supportCode.defineBeforeHook(null, function () {
            throw error;
        });
        var supportCodeExecutor = supportCode.beforeHooks[0].match(null);
        assert_1.default.throws(function () { return supportCodeExecutor.execute(null); }, error);
    });
    it('does not define a step definition when a parameter type is not defined', function () {
        var supportCode = new SupportCode_1.default(messages_1.IdGenerator.incrementing(), new IncrementClock_1.default(), ErrorMessageGenerator_1.withFullStackTrace());
        supportCode.defineStepDefinition(null, 'a {bad} parameter type', function () {
            throw new Error('should never happen');
        });
        assert_1.default.deepStrictEqual(supportCode.stepDefinitions, []);
    });
});
//# sourceMappingURL=SupportCodeTest.js.map