"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var messages_1 = require("@cucumber/messages");
var makeTestCase_1 = __importDefault(require("../src/makeTestCase"));
var ExpressionStepDefinition_1 = __importDefault(require("../src/ExpressionStepDefinition"));
var Hook_1 = __importDefault(require("../src/Hook"));
var cucumber_expressions_1 = require("@cucumber/cucumber-expressions");
var gherkin_1 = require("@cucumber/gherkin");
var IncrementClock_1 = __importDefault(require("../src/IncrementClock"));
var ErrorMessageGenerator_1 = require("../src/ErrorMessageGenerator");
var makePickleTestStep_1 = __importDefault(require("../src/makePickleTestStep"));
var makeHookTestStep_1 = __importDefault(require("../src/makeHookTestStep"));
describe('makeTestCase', function () {
    it('transforms a Pickle to a TestCase', function () {
        var pickle = makePickleWithTwoSteps();
        var stepDefinitions = makeStepDefinitions();
        var testCase = makeTestCase_1.default(pickle, stepDefinitions, [], [], new gherkin_1.Query(), messages_1.IdGenerator.incrementing(), new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace(), makePickleTestStep_1.default, makeHookTestStep_1.default);
        assert_1.default.deepStrictEqual(testCase.toMessage().testCase.testSteps.map(function (s) { return s.pickleStepId; }), ['step-1', 'step-2']);
    });
    context('when the pickle has no steps', function () {
        it('generates a synthetic undefined test step', function () { return __awaiter(void 0, void 0, void 0, function () {
            var pickle, testCase, messageList, listener;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pickle = new messages_1.messages.Pickle({
                            id: 'some-id',
                            name: 'some name',
                            steps: [],
                        });
                        testCase = makeTestCase_1.default(pickle, [], [], [], new gherkin_1.Query(), messages_1.IdGenerator.incrementing(), new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace(), makePickleTestStep_1.default, makeHookTestStep_1.default);
                        messageList = [];
                        listener = function (message) {
                            return messageList.push(message);
                        };
                        return [4 /*yield*/, testCase.execute(listener, 0, 'some-test-case-started-id')];
                    case 1:
                        _a.sent();
                        assert_1.default.equal(messageList.length, 4);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    context('when hooks are defined', function () {
        context('when a before hook matches', function () {
            it('adds a step before the scenario ones', function () {
                var beforeHooks = [new Hook_1.default('hook-id', null, null, function () { return null; })];
                var pickle = makePickleWithTwoSteps();
                var stepDefinitions = makeStepDefinitions();
                var testCase = makeTestCase_1.default(pickle, stepDefinitions, beforeHooks, [], new gherkin_1.Query(), messages_1.IdGenerator.incrementing(), new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace(), makePickleTestStep_1.default, makeHookTestStep_1.default);
                assert_1.default.deepStrictEqual(testCase.toMessage().testCase.testSteps.map(function (s) { return s.pickleStepId; }), [undefined, 'step-1', 'step-2']);
                assert_1.default.strictEqual(testCase.toMessage().testCase.testSteps[0].hookId, beforeHooks[0].toMessage().hook.id);
            });
        });
    });
    context('when an after hook matches', function () {
        it('adds a step after the scenario ones', function () {
            var afterHooks = [new Hook_1.default('hook-id', null, null, function () { return null; })];
            var pickle = makePickleWithTwoSteps();
            var stepDefinitions = makeStepDefinitions();
            var testCase = makeTestCase_1.default(pickle, stepDefinitions, [], afterHooks, new gherkin_1.Query(), messages_1.IdGenerator.incrementing(), new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace(), makePickleTestStep_1.default, makeHookTestStep_1.default);
            assert_1.default.deepStrictEqual(testCase.toMessage().testCase.testSteps.map(function (s) { return s.pickleStepId; }), ['step-1', 'step-2', undefined]);
            assert_1.default.strictEqual(testCase.toMessage().testCase.testSteps[2].hookId, afterHooks[0].toMessage().hook.id);
        });
    });
    function makePickleWithTwoSteps() {
        return new messages_1.messages.Pickle({
            id: 'some-id',
            name: 'some name',
            steps: [
                new messages_1.messages.Pickle.PickleStep({
                    id: 'step-1',
                    text: 'a passed step',
                }),
                new messages_1.messages.Pickle.PickleStep({
                    id: 'step-2',
                    text: 'a failed step',
                }),
            ],
        });
    }
    function makeStepDefinitions() {
        var parameterTypeRegistry = new cucumber_expressions_1.ParameterTypeRegistry();
        return [
            new ExpressionStepDefinition_1.default('hook-id', new cucumber_expressions_1.CucumberExpression('a passed {word}', parameterTypeRegistry), null, 
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            function (thing) { return undefined; }),
            new ExpressionStepDefinition_1.default('hook-id', new cucumber_expressions_1.CucumberExpression('a failed {word}', parameterTypeRegistry), null, 
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            function (thing) { return undefined; }),
        ];
    }
});
//# sourceMappingURL=makeTestCaseTest.js.map