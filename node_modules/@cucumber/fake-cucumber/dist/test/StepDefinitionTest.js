"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var messages_1 = require("@cucumber/messages");
var ExpressionStepDefinition_1 = __importDefault(require("../src/ExpressionStepDefinition"));
var cucumber_expressions_1 = require("@cucumber/cucumber-expressions");
var TestWorld_1 = __importDefault(require("./TestWorld"));
describe('StepDefinition', function () {
    describe('#match', function () {
        it('returns null when there is no match', function () {
            var expression = new cucumber_expressions_1.CucumberExpression('banana', new cucumber_expressions_1.ParameterTypeRegistry());
            var stepdef = new ExpressionStepDefinition_1.default('stepdef-id', expression, null, function () { return null; });
            var pickleStep = messages_1.messages.Pickle.PickleStep.create({
                text: 'apple',
            });
            var match = stepdef.match(pickleStep);
            assert_1.default.strictEqual(match, null);
        });
        it('returns a SupportCodeExecutor object when there is a match', function () {
            var expression = new cucumber_expressions_1.CucumberExpression('I have {int} cukes', new cucumber_expressions_1.ParameterTypeRegistry());
            var stepdef = new ExpressionStepDefinition_1.default('stepdef-id', expression, null, function (cukeCount) { return cukeCount; });
            var pickleStep = messages_1.messages.Pickle.PickleStep.create({
                text: 'I have 7 cukes',
            });
            var executor = stepdef.match(pickleStep);
            assert_1.default.strictEqual(executor.execute(new TestWorld_1.default()), 7);
        });
    });
    describe('#toMessage', function () {
        it('generates a StepDefinition object for RegularExpression', function () {
            var expression = new cucumber_expressions_1.RegularExpression(/banana/, new cucumber_expressions_1.ParameterTypeRegistry());
            var stepdef = new ExpressionStepDefinition_1.default('stepdef-id', expression, null, function () { return null; });
            var message = stepdef.toMessage();
            assert_1.default.strictEqual(message.stepDefinition.pattern.type, messages_1.messages.StepDefinition.StepDefinitionPattern.StepDefinitionPatternType
                .REGULAR_EXPRESSION);
        });
        it('generates a StepDefinition object for CucumberExpression', function () {
            var expression = new cucumber_expressions_1.CucumberExpression('banana', new cucumber_expressions_1.ParameterTypeRegistry());
            var stepdef = new ExpressionStepDefinition_1.default('stepdef-id', expression, null, function () { return null; });
            var message = stepdef.toMessage();
            assert_1.default.strictEqual(message.stepDefinition.pattern.type, messages_1.messages.StepDefinition.StepDefinitionPattern.StepDefinitionPatternType
                .CUCUMBER_EXPRESSION);
        });
    });
});
//# sourceMappingURL=StepDefinitionTest.js.map