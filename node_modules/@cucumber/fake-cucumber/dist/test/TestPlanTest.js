"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var TestHelpers_1 = require("./TestHelpers");
var messages_1 = require("@cucumber/messages");
var assert_1 = __importDefault(require("assert"));
var TestPlan_1 = __importDefault(require("../src/TestPlan"));
var gherkin_1 = require("@cucumber/gherkin");
var IncrementClock_1 = __importDefault(require("../src/IncrementClock"));
var ErrorMessageGenerator_1 = require("../src/ErrorMessageGenerator");
var SupportCode_1 = __importDefault(require("../src/SupportCode"));
var makeTestCase_1 = __importDefault(require("../src/makeTestCase"));
var makePickleTestStep_1 = __importDefault(require("../src/makePickleTestStep"));
var makeHookTestStep_1 = __importDefault(require("../src/makeHookTestStep"));
describe('TestPlan', function () {
    var supportCode;
    beforeEach(function () {
        supportCode = new SupportCode_1.default(messages_1.IdGenerator.incrementing(), new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace());
    });
    it('executes test cases', function () { return __awaiter(void 0, void 0, void 0, function () {
        var gherkinSource, testPlan, envelopes, listener, testStepFinisheds;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    supportCode.defineStepDefinition(null, 'a passed step', function () { return undefined; });
                    gherkinSource = "Feature: test\n  Scenario: test\n    Given a passed step\n";
                    return [4 /*yield*/, makeTestPlan(gherkinSource, supportCode)];
                case 1:
                    testPlan = _a.sent();
                    envelopes = [];
                    listener = function (envelope) {
                        if (!envelope)
                            throw new Error('Envelope was null or undefined');
                        envelopes.push(envelope);
                    };
                    return [4 /*yield*/, testPlan.execute(listener)];
                case 2:
                    _a.sent();
                    testStepFinisheds = envelopes
                        .filter(function (m) { return m.testStepFinished; })
                        .map(function (m) { return m.testStepFinished; });
                    assert_1.default.deepStrictEqual(testStepFinisheds.length, 1);
                    assert_1.default.strictEqual(testStepFinisheds[0].testStepResult.status, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED);
                    return [2 /*return*/];
            }
        });
    }); });
    var Flight = /** @class */ (function () {
        function Flight(name) {
            this.name = name;
        }
        return Flight;
    }());
    it('defines parameter types', function () { return __awaiter(void 0, void 0, void 0, function () {
        var gherkinSource, testPlan, envelopes, listener, testStepFinisheds, parameterTypes;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    supportCode.defineParameterType({
                        name: 'flight',
                        regexp: /[A-Z]{3}-[A-Z]{3}/,
                        transformer: function (name) {
                            return new Flight(name);
                        },
                    });
                    supportCode.defineStepDefinition(null, 'flight {flight}', function (flight) { return assert_1.default.strictEqual(flight.name, 'LHR-CDG'); });
                    gherkinSource = "Feature: test\n  Scenario: test\n    Given flight LHR-CDG\n";
                    return [4 /*yield*/, makeTestPlan(gherkinSource, supportCode)];
                case 1:
                    testPlan = _a.sent();
                    envelopes = [];
                    listener = function (envelope) { return envelopes.push(envelope); };
                    return [4 /*yield*/, testPlan.execute(listener)];
                case 2:
                    _a.sent();
                    testStepFinisheds = envelopes
                        .filter(function (m) { return m.testStepFinished; })
                        .map(function (m) { return m.testStepFinished; });
                    assert_1.default.deepStrictEqual(testStepFinisheds.length, 1);
                    assert_1.default.strictEqual(testStepFinisheds[0].testStepResult.status, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED);
                    parameterTypes = envelopes
                        .filter(function (m) { return m.parameterType; })
                        .map(function (m) { return m.parameterType; });
                    assert_1.default.deepStrictEqual(parameterTypes.length, 1);
                    assert_1.default.strictEqual(parameterTypes[0].name, 'flight');
                    return [2 /*return*/];
            }
        });
    }); });
    it('attaches text attachments', function () { return __awaiter(void 0, void 0, void 0, function () {
        var gherkinSource, testPlan, envelopes, listener, attachments;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    supportCode.defineStepDefinition(null, 'a passed step', function () {
                        this.attach('hello world', 'text/plain');
                    });
                    gherkinSource = "Feature: test\n  Scenario: test\n    Given a passed step\n";
                    return [4 /*yield*/, makeTestPlan(gherkinSource, supportCode)];
                case 1:
                    testPlan = _a.sent();
                    envelopes = [];
                    listener = function (envelope) { return envelopes.push(envelope); };
                    return [4 /*yield*/, testPlan.execute(listener)];
                case 2:
                    _a.sent();
                    attachments = envelopes
                        .filter(function (m) { return m.attachment; })
                        .map(function (m) { return m.attachment; });
                    assert_1.default.deepStrictEqual(attachments.length, 1);
                    assert_1.default.strictEqual(attachments[0].body, 'hello world');
                    return [2 /*return*/];
            }
        });
    }); });
});
function makeTestPlan(gherkinSource, supportCode) {
    return __awaiter(this, void 0, void 0, function () {
        var gherkinEnvelopes, gherkinQuery, gherkinEnvelopes_1, gherkinEnvelopes_1_1, gherkinEnvelope, testCases;
        var e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, TestHelpers_1.streamToArray(TestHelpers_1.gherkinMessages(gherkinSource, 'test.feature'))];
                case 1:
                    gherkinEnvelopes = _b.sent();
                    gherkinQuery = new gherkin_1.Query();
                    try {
                        for (gherkinEnvelopes_1 = __values(gherkinEnvelopes), gherkinEnvelopes_1_1 = gherkinEnvelopes_1.next(); !gherkinEnvelopes_1_1.done; gherkinEnvelopes_1_1 = gherkinEnvelopes_1.next()) {
                            gherkinEnvelope = gherkinEnvelopes_1_1.value;
                            gherkinQuery.update(gherkinEnvelope);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (gherkinEnvelopes_1_1 && !gherkinEnvelopes_1_1.done && (_a = gherkinEnvelopes_1.return)) _a.call(gherkinEnvelopes_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    testCases = gherkinQuery
                        .getPickles()
                        .map(function (pickle) {
                        return makeTestCase_1.default(pickle, supportCode.stepDefinitions, supportCode.beforeHooks, supportCode.afterHooks, gherkinQuery, supportCode.newId, supportCode.clock, supportCode.makeErrorMessage, makePickleTestStep_1.default, makeHookTestStep_1.default);
                    });
                    return [2 /*return*/, new TestPlan_1.default(testCases, supportCode)];
            }
        });
    });
}
//# sourceMappingURL=TestPlanTest.js.map