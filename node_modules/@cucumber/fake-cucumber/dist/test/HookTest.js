"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var Hook_1 = __importDefault(require("../src/Hook"));
var messages_1 = require("@cucumber/messages");
var TestWorld_1 = __importDefault(require("./TestWorld"));
describe('Hook', function () {
    describe('#match', function () {
        it("does not return a SupportCodeExecutor if the hook's tag expression does not match", function () {
            var hook = new Hook_1.default('hook-id', 'not @foo', null, function () {
                throw new Error('unexpected');
            });
            var pickle = new messages_1.messages.Pickle({
                tags: [new messages_1.messages.Pickle.PickleTag({ name: '@foo' })],
            });
            var executor = hook.match(pickle);
            assert_1.default.equal(executor, null);
        });
        it("returns a SupportCodeExecutor if the hook's tag expression matches", function () {
            var hook = new Hook_1.default('hook-id', 'not @foo', null, function () {
                return 'something';
            });
            var pickle = new messages_1.messages.Pickle({
                tags: [new messages_1.messages.Pickle.PickleTag({ name: '@bar' })],
            });
            var executor = hook.match(pickle);
            assert_1.default.strictEqual(executor.execute(new TestWorld_1.default()), 'something');
        });
        it('returns a SupportCodeExecutor if the hook has no tag expression', function () {
            var hook = new Hook_1.default('hook-id', null, null, function () {
                return 'something';
            });
            var pickle = new messages_1.messages.Pickle({
                tags: [new messages_1.messages.Pickle.PickleTag({ name: '@bar' })],
            });
            var executor = hook.match(pickle);
            assert_1.default.strictEqual(executor.execute(new TestWorld_1.default()), 'something');
        });
    });
});
//# sourceMappingURL=HookTest.js.map