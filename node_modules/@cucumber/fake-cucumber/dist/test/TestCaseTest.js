"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var messages_1 = require("@cucumber/messages");
var assert_1 = __importDefault(require("assert"));
var TestStep_1 = __importDefault(require("../src/TestStep"));
var TestCase_1 = __importDefault(require("../src/TestCase"));
var IncrementClock_1 = __importDefault(require("../src/IncrementClock"));
var ErrorMessageGenerator_1 = require("../src/ErrorMessageGenerator");
var millisecondsToDuration = messages_1.TimeConversion.millisecondsToDuration;
var StubTestStep = /** @class */ (function (_super) {
    __extends(StubTestStep, _super);
    function StubTestStep(alwaysExecute, status, message) {
        var _this = _super.call(this, 'some-id', 'some-source-id', alwaysExecute, [], ['some.feature:123'], new IncrementClock_1.default(), ErrorMessageGenerator_1.withSourceFramesOnlyStackTrace()) || this;
        _this.status = status;
        _this.message = message;
        return _this;
    }
    StubTestStep.prototype.toMessage = function () {
        return new messages_1.messages.TestCase.TestStep();
    };
    StubTestStep.prototype.execute = function (world, testCaseStartedId, listener) {
        return __awaiter(this, void 0, void 0, function () {
            var testStepResult;
            return __generator(this, function (_a) {
                testStepResult = this.emitTestStepFinished(testCaseStartedId, new messages_1.messages.TestStepFinished.TestStepResult({
                    status: this.status,
                    duration: millisecondsToDuration(1005),
                    message: this.message,
                }), listener);
                return [2 /*return*/, Promise.resolve(testStepResult)];
            });
        });
    };
    return StubTestStep;
}(TestStep_1.default));
describe('TestCase', function () {
    describe('#execute', function () {
        it('executes all passing steps', function () { return __awaiter(void 0, void 0, void 0, function () {
            var emitted, testSteps, testCase, testStepStatuses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        emitted = [];
                        testSteps = [
                            new StubTestStep(false, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED),
                            new StubTestStep(false, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED),
                        ];
                        testCase = new TestCase_1.default('some-test-case-id', testSteps, 'some-pickle-id', new IncrementClock_1.default());
                        return [4 /*yield*/, testCase.execute(function (message) { return emitted.push(message); }, 0, 'test-case-started-id')];
                    case 1:
                        _a.sent();
                        testStepStatuses = emitted
                            .filter(function (m) { return m.testStepFinished; })
                            .map(function (m) { return m.testStepFinished.testStepResult.status; });
                        assert_1.default.deepStrictEqual(testStepStatuses, [
                            messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                            messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                        ]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('skips steps after a failed step', function () { return __awaiter(void 0, void 0, void 0, function () {
            var emitted, testSteps, testCase, testStepStatuses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        emitted = [];
                        testSteps = [
                            new StubTestStep(false, messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED),
                            new StubTestStep(false, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED),
                        ];
                        testCase = new TestCase_1.default('some-test-case-id', testSteps, 'some-pickle-id', new IncrementClock_1.default());
                        return [4 /*yield*/, testCase.execute(function (message) { return emitted.push(message); }, 0, 'test-case-started-id')];
                    case 1:
                        _a.sent();
                        testStepStatuses = emitted
                            .filter(function (m) { return m.testStepFinished; })
                            .map(function (m) { return m.testStepFinished.testStepResult.status; });
                        assert_1.default.deepStrictEqual(testStepStatuses, [
                            messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED,
                            messages_1.messages.TestStepFinished.TestStepResult.Status.SKIPPED,
                        ]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('always runs after steps regardless of previous steps status', function () { return __awaiter(void 0, void 0, void 0, function () {
            var emitted, testSteps, testCase, testStepStatuses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        emitted = [];
                        testSteps = [
                            new StubTestStep(true, messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED),
                            new StubTestStep(true, messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED),
                        ];
                        testCase = new TestCase_1.default('some-test-case-id', testSteps, 'some-pickle-id', new IncrementClock_1.default());
                        return [4 /*yield*/, testCase.execute(function (message) { return emitted.push(message); }, 0, 'test-case-started-id')];
                    case 1:
                        _a.sent();
                        testStepStatuses = emitted
                            .filter(function (m) { return m.testStepFinished; })
                            .map(function (m) { return m.testStepFinished.testStepResult.status; });
                        assert_1.default.deepStrictEqual(testStepStatuses, [
                            messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED,
                            messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED,
                        ]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('emits TestCaseStarted and TestCaseFinished messages', function () { return __awaiter(void 0, void 0, void 0, function () {
            var emitted, testSteps, testCase, testCaseStarted, testCaseFinished;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        emitted = [];
                        testSteps = [
                            new StubTestStep(false, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED),
                        ];
                        testCase = new TestCase_1.default('some-test-case-id', testSteps, 'some-pickle-id', new IncrementClock_1.default());
                        return [4 /*yield*/, testCase.execute(function (message) { return emitted.push(message); }, 0, 'test-case-started-id')];
                    case 1:
                        _a.sent();
                        testCaseStarted = emitted[0].testCaseStarted;
                        testCaseFinished = emitted.find(function (m) { return m.testCaseFinished; })
                            .testCaseFinished;
                        assert_1.default.strictEqual(testCaseStarted.testCaseId, testCase.id);
                        assert_1.default.strictEqual(testCaseFinished.testCaseStartedId, testCaseStarted.id);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=TestCaseTest.js.map