"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var makeAttach_1 = __importDefault(require("../src/makeAttach"));
var messages_1 = require("@cucumber/messages");
var fs_1 = __importDefault(require("fs"));
describe('#attach', function () {
    it('can attach a string', function () {
        var envelopes = [];
        var listener = function (envelope) {
            return envelopes.push(envelope);
        };
        var attach = makeAttach_1.default('the-test-step-id', 'the-test-case-started-id', listener);
        attach('hello', 'text/plain');
        assert_1.default.deepStrictEqual(envelopes[0], new messages_1.messages.Envelope({
            attachment: new messages_1.messages.Attachment({
                mediaType: 'text/plain',
                contentEncoding: messages_1.messages.Attachment.ContentEncoding.IDENTITY,
                testCaseStartedId: 'the-test-case-started-id',
                testStepId: 'the-test-step-id',
                body: 'hello',
            }),
        }));
    });
    it('can attach a buffer', function () {
        var envelopes = [];
        var listener = function (envelope) {
            return envelopes.push(envelope);
        };
        var attach = makeAttach_1.default('the-test-step-id', 'the-test-case-started-id', listener);
        var buffer = Buffer.from(__spread(Array(4).keys()));
        attach(buffer, 'application/octet-stream');
        assert_1.default.deepStrictEqual(envelopes[0], new messages_1.messages.Envelope({
            attachment: new messages_1.messages.Attachment({
                mediaType: 'application/octet-stream',
                testCaseStartedId: 'the-test-case-started-id',
                testStepId: 'the-test-step-id',
                body: buffer.toString('base64'),
                contentEncoding: messages_1.messages.Attachment.ContentEncoding.BASE64,
            }),
        }));
    });
    it('can attach a readable stream', function () { return __awaiter(void 0, void 0, void 0, function () {
        var envelopes, listener, attach, stream, expectedLength, buffer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    envelopes = [];
                    listener = function (envelope) {
                        return envelopes.push(envelope);
                    };
                    attach = makeAttach_1.default('the-test-step-id', 'the-test-case-started-id', listener);
                    stream = fs_1.default.createReadStream(__dirname + '/cucumber-growing-on-vine.jpg');
                    return [4 /*yield*/, attach(stream, 'image/jpg')];
                case 1:
                    _a.sent();
                    expectedLength = 851133 // wc -c < ./attachments/cucumber-growing-on-vine.jpg
                    ;
                    buffer = Buffer.from(envelopes[0].attachment.body, 'base64');
                    assert_1.default.equal(buffer.length, expectedLength);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=attachTest.js.map